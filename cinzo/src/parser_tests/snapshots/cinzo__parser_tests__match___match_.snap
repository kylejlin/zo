---
source: src/parser_tests/match_.rs
expression: "&cst"
---
Match(
    Match {
        lparen: ByteIndex(
            1,
        ),
        matchee: Deb(
            NumberLiteral {
                value: 0,
                span: (
                    ByteIndex(
                        18,
                    ),
                    ByteIndex(
                        19,
                    ),
                ),
            },
        ),
        return_type: Deb(
            NumberLiteral {
                value: 3,
                span: (
                    ByteIndex(
                        25,
                    ),
                    ByteIndex(
                        26,
                    ),
                ),
            },
        ),
        cases_lparen: ByteIndex(
            45,
        ),
        cases: Cons(
            Cons(
                Nil,
                MatchCase {
                    lparen: ByteIndex(
                        55,
                    ),
                    arity: NumberLiteral {
                        value: 0,
                        span: (
                            ByteIndex(
                                56,
                            ),
                            ByteIndex(
                                57,
                            ),
                        ),
                    },
                    return_val: Deb(
                        NumberLiteral {
                            value: 1,
                            span: (
                                ByteIndex(
                                    58,
                                ),
                                ByteIndex(
                                    59,
                                ),
                            ),
                        },
                    ),
                    rparen: ByteIndex(
                        59,
                    ),
                },
            ),
            MatchCase {
                lparen: ByteIndex(
                    70,
                ),
                arity: NumberLiteral {
                    value: 1,
                    span: (
                        ByteIndex(
                            71,
                        ),
                        ByteIndex(
                            72,
                        ),
                    ),
                },
                return_val: Deb(
                    NumberLiteral {
                        value: 2,
                        span: (
                            ByteIndex(
                                73,
                            ),
                            ByteIndex(
                                74,
                            ),
                        ),
                    },
                ),
                rparen: ByteIndex(
                    74,
                ),
            },
        ),
        cases_rparen: ByteIndex(
            80,
        ),
        rparen: ByteIndex(
            82,
        ),
    },
)
