enum Nat
    zero
    succ(pred: Nat)
end

enum Never
end

def ex_falso(T: Type, f: Never) -> T
    match f
    end

enum* Eq(T: Type, left: T) ^(right: T)
    refl ^(left)
end

def add(dec a: Nat, b: Nat) -> Nat
    match a
    case zero:
        b
    case succ(a_pred):
        succ(add(a_pred, b))
    end
    
enum List(T: Type)
    nil
    cons(head: T, tail: List)
end

enum Bool
    false
    true
end

def filter(T: Type, dec l: List(T), p: For(_: T) -> Bool) -> List(T)
    match l
    case nil:
        nil
    case cons(head, tail):
        match p(head)
        case true:
            cons(head, filter(tail, p))
        case false:
            filter(tail, p)
        end
    end

n1 = succ(zero)
n2 = succ(n1)
n3 = succ(n2)

list123 = cons(Nat)(n1,
    cons(Nat)(n2,
        cons(Nat)(n3, nil(Nat))
    )
)

def sum(dec l: List(Nat)) -> Nat
    match l
    case nil:
        zero
    case cons(head, tail):
        add(head, sum(tail))
    end

n8 =
    n6 = sum(list123)

    enum CoinSide
        heads
        tails
    end

    garbage = zero

    match heads
    case heads:
        add(n2, n6)
    case tails:
        garbage
    end

def not(b: Bool) -> Bool
    match b
    case true:
        false
    case false:
        true
    end

def nat_eq(dec a: Nat, b: Nat) -> Bool
    match a
    case zero:
        match b
        case zero:
            true
        case succ(_):
            false
        end
    case succ(a_pred):
        match b
        case zero:
            false
        case succ(b_pred):
            nat_eq(a_pred, b_pred)
        end
    end

n5 = 
    def nat_ne(n: Nat) -> Bool
        not(nat_eq(n))

    non1 = filter(Nat, list123, fun(n: Nat) -> Bool
        nat_ne(n, n1)
    )

    sum(non1)

enum TrailingComma(n: Nat,) ^(x: Nat,)
    trailing_comma(p: Nat,) ^(x,)
end

def trailing_comma_def_and_app(dec n: Nat,) -> Nat
    add(n5, n5,)

for_trailing_comma = For(_: Nat,) -> Bool

match_return_type_simple = match n5 -> Bool
    case zero:
        true
    case succ(_):
        false
end

match_return_type_matchee = match n5
use n5_prime -> Bool
    case zero:
        true
    case succ(_):
        false
end

match_return_type_indices = match refl(Nat, zero)
use ^(zero_prime) -> Bool
    case zero:
        true
    case succ(_):
        false
end

match_return_type_indices_trailing_comma = match refl(Nat, zero)
use ^(zero_prime,) -> Bool
    case zero:
        true
    case succ(_):
        false
end

match_return_type_matchee_and_indices = match refl(Nat, zero)
use refl_zero_prime ^(zero_prime) -> Bool
    case zero:
        true
    case succ(_):
        false
end

match_return_type_matchee_and_indices = match refl(Nat, zero)
use refl_zero_prime ^(zero_prime,) -> Bool
    case zero:
        true
    case succ(_):
        false
end
