// This code was generated by Kiki.
// Kiki is an open-source minimalist parser generator for Rust.
// You can read more at https://crates.io/crates/kiki
//
// This code was generated from a grammar with the following hash:
// @sha256 7c83e69b879a059f19430d12351b43fe5adf373969949f0103ae55cae0f7a9b1

// Since this code is automatically generated,
// some parts may be unidiomatic.
// The linter often complains about these parts.
// However, these warnings are not useful.
// Therefore, we disable certain lints for this file.
#![allow(non_snake_case)]
#![allow(dead_code)]

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Token {
    LParen(crate::token::ByteIndex),
    RParen(crate::token::ByteIndex),
    LSquare(crate::token::ByteIndex),
    RSquare(crate::token::ByteIndex),
    Eq(crate::token::ByteIndex),
    Colon(crate::token::ByteIndex),
    Comma(crate::token::ByteIndex),
    ThinArrow(crate::token::ByteIndex),
    Dash(crate::token::ByteIndex),
    Underscore(crate::token::ByteIndex),
    LetKw(crate::token::ByteIndex),
    IndKw(crate::token::ByteIndex),
    FunKw(crate::token::ByteIndex),
    AindKw(crate::token::ByteIndex),
    MatchKw(crate::token::ByteIndex),
    AfunKw(crate::token::ByteIndex),
    ForKw(crate::token::ByteIndex),
    CaseKw(crate::token::ByteIndex),
    ReturnKw(crate::token::ByteIndex),
    UseKw(crate::token::ByteIndex),
    Ident(crate::token::Ident),
    Number(crate::token::NumberLiteral),
    String(crate::token::StringLiteral),
    Universe(crate::token::UniverseLiteral),
    VconIndex(crate::token::VconIndexLiteral),
    ReturnArity(crate::token::ReturnArityLiteral),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Expr {
    Let(
        Box<Let>,
    ),
    Ind(
        Box<Ind>,
    ),
    Fun(
        Box<Fun>,
    ),
    Aind(
        Box<Aind>,
    ),
    Vcon(
        Box<Vcon>,
    ),
    Match(
        Box<Match>,
    ),
    Afun(
        Box<Afun>,
    ),
    For(
        Box<For>,
    ),
    VarOrApp(
        Box<VarOrApp>,
    ),
    Universe(
        crate::token::UniverseLiteral,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Let {
    pub letkw: crate::token::ByteIndex,
    pub name: crate::token::Ident,
    pub val: Box<Expr>,
    pub next_val: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Ind {
    pub indkw: crate::token::ByteIndex,
    pub innards: Box<IndCommonInnards>,
    pub next_val: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct IndCommonInnards {
    pub params: Box<OptParenthesizedParamDefs>,
    pub name: crate::token::Ident,
    pub custom_zo_name: Box<OptString>,
    pub indices: Box<OptSquareBracketedParamDefs>,
    pub cases: Box<ZeroOrMoreIndCases>,
    pub returnkw: crate::token::ByteIndex,
    pub universe: crate::token::UniverseLiteral,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptString {
    None,
    Some(
        crate::token::StringLiteral,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptParenthesizedParamDefs {
    None,
    Some(
        Box<ParenthesizedCommaSeparatedParamDefs>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ParenthesizedCommaSeparatedParamDefs {
    pub lparen: crate::token::ByteIndex,
    pub params: Box<CommaSeparatedParamDefs>,
    pub rparen: crate::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum CommaSeparatedParamDefs {
    One(
        Box<ParamDef>,
    ),
    Snoc(
        Box<CommaSeparatedParamDefs>,
        Box<ParamDef>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ParamDef {
    pub dash: Box<OptDash>,
    pub name: Box<IdentOrUnderscore>,
    pub type_: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptDash {
    None,
    Some(
        crate::token::ByteIndex,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptSquareBracketedParamDefs {
    None,
    Some(
        Box<SquareBracketedParamDefs>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct SquareBracketedParamDefs {
    pub lsquare: crate::token::ByteIndex,
    pub params: Box<CommaSeparatedParamDefs>,
    pub rsquare: crate::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ZeroOrMoreIndCases {
    Nil,
    Snoc(
        Box<ZeroOrMoreIndCases>,
        Box<IndCase>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct IndCase {
    pub casekw: crate::token::ByteIndex,
    pub name: crate::token::Ident,
    pub params: Box<OptParenthesizedParamDefs>,
    pub return_type: Box<OptColonSquareBracketedExprs>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptColonSquareBracketedExprs {
    None,
    Some(
        Box<CommaSeparatedExprs>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Fun {
    pub funkw: crate::token::ByteIndex,
    pub name: crate::token::Ident,
    pub innards: Box<FunCommonInnards>,
    pub next_val: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct FunCommonInnards {
    pub params: Box<ParenthesizedCommaSeparatedParamDefs>,
    pub return_type: Box<Expr>,
    pub return_val: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Aind {
    pub aindkw: crate::token::ByteIndex,
    pub innards: Box<IndCommonInnards>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Vcon {
    pub vcon_index: crate::token::VconIndexLiteral,
    pub innards: Box<IndCommonInnards>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Match {
    pub matchkw: crate::token::ByteIndex,
    pub matchee: Box<Expr>,
    pub cases: Box<ZeroOrMoreMatchCases>,
    pub return_arity: Box<ReturnArityClause>,
    pub return_type: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ReturnArityClause {
    Unnamed(
        crate::token::ReturnArityLiteral,
    ),
    Matchee(
        crate::token::Ident,
        crate::token::ReturnArityLiteral,
    ),
    Indices(
        Box<SquareBracketedCommaSeparatedIdentsOrUnderscores>,
    ),
    MatcheeAndIndices(
        crate::token::Ident,
        Box<SquareBracketedCommaSeparatedIdentsOrUnderscores>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct SquareBracketedCommaSeparatedIdentsOrUnderscores {
    pub lsquare: crate::token::ByteIndex,
    pub idents: Box<CommaSeparatedIdentsOrUnderscores>,
    pub rsquare: crate::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum CommaSeparatedIdentsOrUnderscores {
    One(
        Box<IdentOrUnderscore>,
    ),
    Snoc(
        Box<CommaSeparatedIdentsOrUnderscores>,
        Box<IdentOrUnderscore>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ZeroOrMoreMatchCases {
    Nil,
    Snoc(
        Box<ZeroOrMoreMatchCases>,
        Box<MatchCase>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct MatchCase {
    pub casekw: crate::token::ByteIndex,
    pub name: crate::token::Ident,
    pub params: Box<OptParenthesizedCommaSeparatedIdentsOrUnderscores>,
    pub return_val: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptParenthesizedCommaSeparatedIdentsOrUnderscores {
    None,
    Some(
        Box<ParenthesizedCommaSeparatedIdentsOrUnderscores>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct ParenthesizedCommaSeparatedIdentsOrUnderscores {
    pub lparen: crate::token::ByteIndex,
    pub idents: Box<CommaSeparatedIdentsOrUnderscores>,
    pub rparen: crate::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Afun {
    pub afunkw: crate::token::ByteIndex,
    pub name: Box<OptIdent>,
    pub innards: Box<FunCommonInnards>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum OptIdent {
    None,
    Some(
        crate::token::Ident,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct App {
    pub callee: Box<VarOrApp>,
    pub lparen: crate::token::ByteIndex,
    pub args: Box<CommaSeparatedExprs>,
    pub rparen: crate::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum VarOrApp {
    Var(
        crate::token::Ident,
    ),
    App(
        Box<App>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum CommaSeparatedExprs {
    One(
        Box<Expr>,
    ),
    Snoc(
        Box<CommaSeparatedExprs>,
        Box<Expr>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct For {
    pub forkw: crate::token::ByteIndex,
    pub params: Box<ParenthesizedCommaSeparatedParamDefs>,
    pub return_type: Box<Expr>,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum IdentOrUnderscore {
    Ident(
        crate::token::Ident,
    ),
    Underscore(
        crate::token::ByteIndex,
    ),
}

/// If the parser encounters an unexpected token `t`, it will return `Err(Some(t))`.
/// If the parser encounters an unexpected end of input, it will return `Err(None)`.
pub fn parse<S>(src: S) -> Result<Expr, Option<Token>>
where S: IntoIterator<Item = Token> {
    let mut quasiterminals = src.into_iter()
        .map(Quasiterminal::Terminal)
        .chain(std::iter::once(Quasiterminal::Eof))
        .peekable();
    let mut states = vec![State::S15];
    let mut nodes: Vec<Node> = vec![];
    loop {
        let top_state = *states.last().unwrap();
        let next_quasiterminal_kind = QuasiterminalKind::from_quasiterminal(quasiterminals.peek().unwrap());
        match get_action(top_state, next_quasiterminal_kind) {
            Action::Shift(new_state) => {
                states.push(new_state);
                nodes.push(Node::from_terminal(quasiterminals.next().unwrap().try_into_terminal().unwrap()));
            }

            Action::Reduce(rule_kind) => {
                let (new_node, new_node_kind) = pop_and_reduce(&mut states, &mut nodes, rule_kind);
                nodes.push(new_node);
                let temp_top_state = *states.last().unwrap();
                let Some(new_state) = get_goto(temp_top_state, new_node_kind) else {
                    return Err(quasiterminals.next().unwrap().try_into_terminal().ok());
                };
                states.push(new_state);
            }

            Action::Accept => {
                return Ok(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            }

            Action::Err => {
                return Err(quasiterminals.next().unwrap().try_into_terminal().ok());
            }
        }
    }
}

enum Quasiterminal {
    Terminal(Token),
    Eof,
}

#[derive(Clone, Copy, Debug)]
enum QuasiterminalKind {
    LParen = 0,
    RParen = 1,
    LSquare = 2,
    RSquare = 3,
    Eq = 4,
    Colon = 5,
    Comma = 6,
    ThinArrow = 7,
    Dash = 8,
    Underscore = 9,
    LetKw = 10,
    IndKw = 11,
    FunKw = 12,
    AindKw = 13,
    MatchKw = 14,
    AfunKw = 15,
    ForKw = 16,
    CaseKw = 17,
    ReturnKw = 18,
    UseKw = 19,
    Ident = 20,
    Number = 21,
    String = 22,
    Universe = 23,
    VconIndex = 24,
    ReturnArity = 25,
    Eof = 26,
}

#[derive(Clone, Copy, Debug)]
enum NonterminalKind {
    Expr = 0,
    Let = 1,
    Ind = 2,
    IndCommonInnards = 3,
    OptString = 4,
    OptParenthesizedParamDefs = 5,
    ParenthesizedCommaSeparatedParamDefs = 6,
    CommaSeparatedParamDefs = 7,
    ParamDef = 8,
    OptDash = 9,
    OptSquareBracketedParamDefs = 10,
    SquareBracketedParamDefs = 11,
    ZeroOrMoreIndCases = 12,
    IndCase = 13,
    OptColonSquareBracketedExprs = 14,
    Fun = 15,
    FunCommonInnards = 16,
    Aind = 17,
    Vcon = 18,
    Match = 19,
    ReturnArityClause = 20,
    SquareBracketedCommaSeparatedIdentsOrUnderscores = 21,
    CommaSeparatedIdentsOrUnderscores = 22,
    ZeroOrMoreMatchCases = 23,
    MatchCase = 24,
    OptParenthesizedCommaSeparatedIdentsOrUnderscores = 25,
    ParenthesizedCommaSeparatedIdentsOrUnderscores = 26,
    Afun = 27,
    OptIdent = 28,
    App = 29,
    VarOrApp = 30,
    CommaSeparatedExprs = 31,
    For = 32,
    IdentOrUnderscore = 33,
}

#[derive(Clone, Copy, Debug)]
enum State {
    S0 = 0,
    S1 = 1,
    S2 = 2,
    S3 = 3,
    S4 = 4,
    S5 = 5,
    S6 = 6,
    S7 = 7,
    S8 = 8,
    S9 = 9,
    S10 = 10,
    S11 = 11,
    S12 = 12,
    S13 = 13,
    S14 = 14,
    S15 = 15,
    S16 = 16,
    S17 = 17,
    S18 = 18,
    S19 = 19,
    S20 = 20,
    S21 = 21,
    S22 = 22,
    S23 = 23,
    S24 = 24,
    S25 = 25,
    S26 = 26,
    S27 = 27,
    S28 = 28,
    S29 = 29,
    S30 = 30,
    S31 = 31,
    S32 = 32,
    S33 = 33,
    S34 = 34,
    S35 = 35,
    S36 = 36,
    S37 = 37,
    S38 = 38,
    S39 = 39,
    S40 = 40,
    S41 = 41,
    S42 = 42,
    S43 = 43,
    S44 = 44,
    S45 = 45,
    S46 = 46,
    S47 = 47,
    S48 = 48,
    S49 = 49,
    S50 = 50,
    S51 = 51,
    S52 = 52,
    S53 = 53,
    S54 = 54,
    S55 = 55,
    S56 = 56,
    S57 = 57,
    S58 = 58,
    S59 = 59,
    S60 = 60,
    S61 = 61,
    S62 = 62,
    S63 = 63,
    S64 = 64,
    S65 = 65,
    S66 = 66,
    S67 = 67,
    S68 = 68,
    S69 = 69,
    S70 = 70,
    S71 = 71,
    S72 = 72,
    S73 = 73,
    S74 = 74,
    S75 = 75,
    S76 = 76,
    S77 = 77,
    S78 = 78,
    S79 = 79,
    S80 = 80,
    S81 = 81,
    S82 = 82,
    S83 = 83,
    S84 = 84,
    S85 = 85,
    S86 = 86,
    S87 = 87,
    S88 = 88,
    S89 = 89,
    S90 = 90,
    S91 = 91,
    S92 = 92,
    S93 = 93,
    S94 = 94,
    S95 = 95,
    S96 = 96,
    S97 = 97,
    S98 = 98,
    S99 = 99,
    S100 = 100,
    S101 = 101,
    S102 = 102,
    S103 = 103,
    S104 = 104,
    S105 = 105,
    S106 = 106,
    S107 = 107,
    S108 = 108,
    S109 = 109,
    S110 = 110,
    S111 = 111,
    S112 = 112,
}

enum Node {
    Expr(Expr),
    Let(Let),
    Ind(Ind),
    IndCommonInnards(IndCommonInnards),
    OptString(OptString),
    OptParenthesizedParamDefs(OptParenthesizedParamDefs),
    ParenthesizedCommaSeparatedParamDefs(ParenthesizedCommaSeparatedParamDefs),
    CommaSeparatedParamDefs(CommaSeparatedParamDefs),
    ParamDef(ParamDef),
    OptDash(OptDash),
    OptSquareBracketedParamDefs(OptSquareBracketedParamDefs),
    SquareBracketedParamDefs(SquareBracketedParamDefs),
    ZeroOrMoreIndCases(ZeroOrMoreIndCases),
    IndCase(IndCase),
    OptColonSquareBracketedExprs(OptColonSquareBracketedExprs),
    Fun(Fun),
    FunCommonInnards(FunCommonInnards),
    Aind(Aind),
    Vcon(Vcon),
    Match(Match),
    ReturnArityClause(ReturnArityClause),
    SquareBracketedCommaSeparatedIdentsOrUnderscores(SquareBracketedCommaSeparatedIdentsOrUnderscores),
    CommaSeparatedIdentsOrUnderscores(CommaSeparatedIdentsOrUnderscores),
    ZeroOrMoreMatchCases(ZeroOrMoreMatchCases),
    MatchCase(MatchCase),
    OptParenthesizedCommaSeparatedIdentsOrUnderscores(OptParenthesizedCommaSeparatedIdentsOrUnderscores),
    ParenthesizedCommaSeparatedIdentsOrUnderscores(ParenthesizedCommaSeparatedIdentsOrUnderscores),
    Afun(Afun),
    OptIdent(OptIdent),
    App(App),
    VarOrApp(VarOrApp),
    CommaSeparatedExprs(CommaSeparatedExprs),
    For(For),
    IdentOrUnderscore(IdentOrUnderscore),
    LParen(crate::token::ByteIndex),
    RParen(crate::token::ByteIndex),
    LSquare(crate::token::ByteIndex),
    RSquare(crate::token::ByteIndex),
    Eq(crate::token::ByteIndex),
    Colon(crate::token::ByteIndex),
    Comma(crate::token::ByteIndex),
    ThinArrow(crate::token::ByteIndex),
    Dash(crate::token::ByteIndex),
    Underscore(crate::token::ByteIndex),
    LetKw(crate::token::ByteIndex),
    IndKw(crate::token::ByteIndex),
    FunKw(crate::token::ByteIndex),
    AindKw(crate::token::ByteIndex),
    MatchKw(crate::token::ByteIndex),
    AfunKw(crate::token::ByteIndex),
    ForKw(crate::token::ByteIndex),
    CaseKw(crate::token::ByteIndex),
    ReturnKw(crate::token::ByteIndex),
    UseKw(crate::token::ByteIndex),
    Ident(crate::token::Ident),
    Number(crate::token::NumberLiteral),
    String(crate::token::StringLiteral),
    Universe(crate::token::UniverseLiteral),
    VconIndex(crate::token::VconIndexLiteral),
    ReturnArity(crate::token::ReturnArityLiteral),
}

#[derive(Clone, Copy, Debug)]
enum Action {
    Shift(State),
    Reduce(RuleKind),
    Accept,
    Err,
}

#[derive(Clone, Copy, Debug)]
enum RuleKind {
    R0 = 0,
    R1 = 1,
    R2 = 2,
    R3 = 3,
    R4 = 4,
    R5 = 5,
    R6 = 6,
    R7 = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    R11 = 11,
    R12 = 12,
    R13 = 13,
    R14 = 14,
    R15 = 15,
    R16 = 16,
    R17 = 17,
    R18 = 18,
    R19 = 19,
    R20 = 20,
    R21 = 21,
    R22 = 22,
    R23 = 23,
    R24 = 24,
    R25 = 25,
    R26 = 26,
    R27 = 27,
    R28 = 28,
    R29 = 29,
    R30 = 30,
    R31 = 31,
    R32 = 32,
    R33 = 33,
    R34 = 34,
    R35 = 35,
    R36 = 36,
    R37 = 37,
    R38 = 38,
    R39 = 39,
    R40 = 40,
    R41 = 41,
    R42 = 42,
    R43 = 43,
    R44 = 44,
    R45 = 45,
    R46 = 46,
    R47 = 47,
    R48 = 48,
    R49 = 49,
    R50 = 50,
    R51 = 51,
    R52 = 52,
    R53 = 53,
    R54 = 54,
    R55 = 55,
    R56 = 56,
    R57 = 57,
    R58 = 58,
    R59 = 59,
}

fn pop_and_reduce(states: &mut Vec<State>, nodes: &mut Vec<Node>, rule_kind: RuleKind) -> (Node, NonterminalKind) {
    match rule_kind {
        RuleKind::R0 => {
            let t0 = Box::new(Let::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Let(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R1 => {
            let t0 = Box::new(Ind::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Ind(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R2 => {
            let t0 = Box::new(Fun::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Fun(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R3 => {
            let t0 = Box::new(Aind::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Aind(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R4 => {
            let t0 = Box::new(Vcon::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Vcon(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R5 => {
            let t0 = Box::new(Match::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Match(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R6 => {
            let t0 = Box::new(Afun::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Afun(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R7 => {
            let t0 = Box::new(For::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::For(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R8 => {
            let t0 = Box::new(VarOrApp::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::VarOrApp(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R9 => {
            let t0 = nodes.pop().unwrap().try_into_universe_23().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Universe(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R10 => {
            let next_val_4 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let val_3 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let name_1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            let letkw_0 = nodes.pop().unwrap().try_into_let_kw_10().ok().unwrap();
            
            states.truncate(states.len() - 5);
            
            (
                Node::Let(Let {
                    letkw: letkw_0,
                    name: name_1,
                    val: val_3,
                    next_val: next_val_4,
                }),
                NonterminalKind::Let,
            )
        }
        RuleKind::R11 => {
            let next_val_2 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let innards_1 = Box::new(IndCommonInnards::try_from(nodes.pop().unwrap()).ok().unwrap());
            let indkw_0 = nodes.pop().unwrap().try_into_ind_kw_11().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::Ind(Ind {
                    indkw: indkw_0,
                    innards: innards_1,
                    next_val: next_val_2,
                }),
                NonterminalKind::Ind,
            )
        }
        RuleKind::R12 => {
            let universe_6 = nodes.pop().unwrap().try_into_universe_23().ok().unwrap();
            let returnkw_5 = nodes.pop().unwrap().try_into_return_kw_18().ok().unwrap();
            let cases_4 = Box::new(ZeroOrMoreIndCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            let indices_3 = Box::new(OptSquareBracketedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let custom_zo_name_2 = Box::new(OptString::try_from(nodes.pop().unwrap()).ok().unwrap());
            let name_1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            let params_0 = Box::new(OptParenthesizedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 7);
            
            (
                Node::IndCommonInnards(IndCommonInnards {
                    params: params_0,
                    name: name_1,
                    custom_zo_name: custom_zo_name_2,
                    indices: indices_3,
                    cases: cases_4,
                    returnkw: returnkw_5,
                    universe: universe_6,
                }),
                NonterminalKind::IndCommonInnards,
            )
        }
        RuleKind::R13 => {
            (
                Node::OptString(OptString::None),
                NonterminalKind::OptString,
            )
        }
        RuleKind::R14 => {
            let t0 = nodes.pop().unwrap().try_into_string_22().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptString(OptString::Some(
                    t0,
                )),
                NonterminalKind::OptString,
            )
        }
        RuleKind::R15 => {
            (
                Node::OptParenthesizedParamDefs(OptParenthesizedParamDefs::None),
                NonterminalKind::OptParenthesizedParamDefs,
            )
        }
        RuleKind::R16 => {
            let t0 = Box::new(ParenthesizedCommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptParenthesizedParamDefs(OptParenthesizedParamDefs::Some(
                    t0,
                )),
                NonterminalKind::OptParenthesizedParamDefs,
            )
        }
        RuleKind::R17 => {
            let rparen_2 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let params_1 = Box::new(CommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::ParenthesizedCommaSeparatedParamDefs(ParenthesizedCommaSeparatedParamDefs {
                    lparen: lparen_0,
                    params: params_1,
                    rparen: rparen_2,
                }),
                NonterminalKind::ParenthesizedCommaSeparatedParamDefs,
            )
        }
        RuleKind::R18 => {
            let t0 = Box::new(ParamDef::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::CommaSeparatedParamDefs(CommaSeparatedParamDefs::One(
                    t0,
                )),
                NonterminalKind::CommaSeparatedParamDefs,
            )
        }
        RuleKind::R19 => {
            let t2 = Box::new(ParamDef::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let t0 = Box::new(CommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 3);
            
            (
                Node::CommaSeparatedParamDefs(CommaSeparatedParamDefs::Snoc(
                    t0,
                    t2,
                )),
                NonterminalKind::CommaSeparatedParamDefs,
            )
        }
        RuleKind::R20 => {
            let type__3 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let name_1 = Box::new(IdentOrUnderscore::try_from(nodes.pop().unwrap()).ok().unwrap());
            let dash_0 = Box::new(OptDash::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 4);
            
            (
                Node::ParamDef(ParamDef {
                    dash: dash_0,
                    name: name_1,
                    type_: type__3,
                }),
                NonterminalKind::ParamDef,
            )
        }
        RuleKind::R21 => {
            (
                Node::OptDash(OptDash::None),
                NonterminalKind::OptDash,
            )
        }
        RuleKind::R22 => {
            let t0 = nodes.pop().unwrap().try_into_dash_8().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptDash(OptDash::Some(
                    t0,
                )),
                NonterminalKind::OptDash,
            )
        }
        RuleKind::R23 => {
            (
                Node::OptSquareBracketedParamDefs(OptSquareBracketedParamDefs::None),
                NonterminalKind::OptSquareBracketedParamDefs,
            )
        }
        RuleKind::R24 => {
            let t0 = Box::new(SquareBracketedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptSquareBracketedParamDefs(OptSquareBracketedParamDefs::Some(
                    t0,
                )),
                NonterminalKind::OptSquareBracketedParamDefs,
            )
        }
        RuleKind::R25 => {
            let rsquare_2 = nodes.pop().unwrap().try_into_r_square_3().ok().unwrap();
            let params_1 = Box::new(CommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lsquare_0 = nodes.pop().unwrap().try_into_l_square_2().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::SquareBracketedParamDefs(SquareBracketedParamDefs {
                    lsquare: lsquare_0,
                    params: params_1,
                    rsquare: rsquare_2,
                }),
                NonterminalKind::SquareBracketedParamDefs,
            )
        }
        RuleKind::R26 => {
            (
                Node::ZeroOrMoreIndCases(ZeroOrMoreIndCases::Nil),
                NonterminalKind::ZeroOrMoreIndCases,
            )
        }
        RuleKind::R27 => {
            let t1 = Box::new(IndCase::try_from(nodes.pop().unwrap()).ok().unwrap());
            let t0 = Box::new(ZeroOrMoreIndCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 2);
            
            (
                Node::ZeroOrMoreIndCases(ZeroOrMoreIndCases::Snoc(
                    t0,
                    t1,
                )),
                NonterminalKind::ZeroOrMoreIndCases,
            )
        }
        RuleKind::R28 => {
            let return_type_3 = Box::new(OptColonSquareBracketedExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let params_2 = Box::new(OptParenthesizedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let name_1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            let casekw_0 = nodes.pop().unwrap().try_into_case_kw_17().ok().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::IndCase(IndCase {
                    casekw: casekw_0,
                    name: name_1,
                    params: params_2,
                    return_type: return_type_3,
                }),
                NonterminalKind::IndCase,
            )
        }
        RuleKind::R29 => {
            (
                Node::OptColonSquareBracketedExprs(OptColonSquareBracketedExprs::None),
                NonterminalKind::OptColonSquareBracketedExprs,
            )
        }
        RuleKind::R30 => {
            nodes.pop().unwrap();
            let t2 = Box::new(CommaSeparatedExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            nodes.pop().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::OptColonSquareBracketedExprs(OptColonSquareBracketedExprs::Some(
                    t2,
                )),
                NonterminalKind::OptColonSquareBracketedExprs,
            )
        }
        RuleKind::R31 => {
            let next_val_3 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let innards_2 = Box::new(FunCommonInnards::try_from(nodes.pop().unwrap()).ok().unwrap());
            let name_1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            let funkw_0 = nodes.pop().unwrap().try_into_fun_kw_12().ok().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::Fun(Fun {
                    funkw: funkw_0,
                    name: name_1,
                    innards: innards_2,
                    next_val: next_val_3,
                }),
                NonterminalKind::Fun,
            )
        }
        RuleKind::R32 => {
            let return_val_3 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let return_type_2 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let params_0 = Box::new(ParenthesizedCommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 4);
            
            (
                Node::FunCommonInnards(FunCommonInnards {
                    params: params_0,
                    return_type: return_type_2,
                    return_val: return_val_3,
                }),
                NonterminalKind::FunCommonInnards,
            )
        }
        RuleKind::R33 => {
            let innards_1 = Box::new(IndCommonInnards::try_from(nodes.pop().unwrap()).ok().unwrap());
            let aindkw_0 = nodes.pop().unwrap().try_into_aind_kw_13().ok().unwrap();
            
            states.truncate(states.len() - 2);
            
            (
                Node::Aind(Aind {
                    aindkw: aindkw_0,
                    innards: innards_1,
                }),
                NonterminalKind::Aind,
            )
        }
        RuleKind::R34 => {
            let innards_1 = Box::new(IndCommonInnards::try_from(nodes.pop().unwrap()).ok().unwrap());
            let vcon_index_0 = nodes.pop().unwrap().try_into_vcon_index_24().ok().unwrap();
            
            states.truncate(states.len() - 2);
            
            (
                Node::Vcon(Vcon {
                    vcon_index: vcon_index_0,
                    innards: innards_1,
                }),
                NonterminalKind::Vcon,
            )
        }
        RuleKind::R35 => {
            let return_type_4 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let return_arity_3 = Box::new(ReturnArityClause::try_from(nodes.pop().unwrap()).ok().unwrap());
            let cases_2 = Box::new(ZeroOrMoreMatchCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            let matchee_1 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let matchkw_0 = nodes.pop().unwrap().try_into_match_kw_14().ok().unwrap();
            
            states.truncate(states.len() - 5);
            
            (
                Node::Match(Match {
                    matchkw: matchkw_0,
                    matchee: matchee_1,
                    cases: cases_2,
                    return_arity: return_arity_3,
                    return_type: return_type_4,
                }),
                NonterminalKind::Match,
            )
        }
        RuleKind::R36 => {
            let t0 = nodes.pop().unwrap().try_into_return_arity_25().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::ReturnArityClause(ReturnArityClause::Unnamed(
                    t0,
                )),
                NonterminalKind::ReturnArityClause,
            )
        }
        RuleKind::R37 => {
            let t2 = nodes.pop().unwrap().try_into_return_arity_25().ok().unwrap();
            let t1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            nodes.pop().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::ReturnArityClause(ReturnArityClause::Matchee(
                    t1,
                    t2,
                )),
                NonterminalKind::ReturnArityClause,
            )
        }
        RuleKind::R38 => {
            nodes.pop().unwrap();
            let t1 = Box::new(SquareBracketedCommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::ReturnArityClause(ReturnArityClause::Indices(
                    t1,
                )),
                NonterminalKind::ReturnArityClause,
            )
        }
        RuleKind::R39 => {
            nodes.pop().unwrap();
            let t3 = Box::new(SquareBracketedCommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let t1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            nodes.pop().unwrap();
            
            states.truncate(states.len() - 5);
            
            (
                Node::ReturnArityClause(ReturnArityClause::MatcheeAndIndices(
                    t1,
                    t3,
                )),
                NonterminalKind::ReturnArityClause,
            )
        }
        RuleKind::R40 => {
            let rsquare_2 = nodes.pop().unwrap().try_into_r_square_3().ok().unwrap();
            let idents_1 = Box::new(CommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lsquare_0 = nodes.pop().unwrap().try_into_l_square_2().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::SquareBracketedCommaSeparatedIdentsOrUnderscores(SquareBracketedCommaSeparatedIdentsOrUnderscores {
                    lsquare: lsquare_0,
                    idents: idents_1,
                    rsquare: rsquare_2,
                }),
                NonterminalKind::SquareBracketedCommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R41 => {
            let t0 = Box::new(IdentOrUnderscore::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::CommaSeparatedIdentsOrUnderscores(CommaSeparatedIdentsOrUnderscores::One(
                    t0,
                )),
                NonterminalKind::CommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R42 => {
            let t2 = Box::new(IdentOrUnderscore::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let t0 = Box::new(CommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 3);
            
            (
                Node::CommaSeparatedIdentsOrUnderscores(CommaSeparatedIdentsOrUnderscores::Snoc(
                    t0,
                    t2,
                )),
                NonterminalKind::CommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R43 => {
            (
                Node::ZeroOrMoreMatchCases(ZeroOrMoreMatchCases::Nil),
                NonterminalKind::ZeroOrMoreMatchCases,
            )
        }
        RuleKind::R44 => {
            let t1 = Box::new(MatchCase::try_from(nodes.pop().unwrap()).ok().unwrap());
            let t0 = Box::new(ZeroOrMoreMatchCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 2);
            
            (
                Node::ZeroOrMoreMatchCases(ZeroOrMoreMatchCases::Snoc(
                    t0,
                    t1,
                )),
                NonterminalKind::ZeroOrMoreMatchCases,
            )
        }
        RuleKind::R45 => {
            let return_val_4 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let params_2 = Box::new(OptParenthesizedCommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            let name_1 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            let casekw_0 = nodes.pop().unwrap().try_into_case_kw_17().ok().unwrap();
            
            states.truncate(states.len() - 5);
            
            (
                Node::MatchCase(MatchCase {
                    casekw: casekw_0,
                    name: name_1,
                    params: params_2,
                    return_val: return_val_4,
                }),
                NonterminalKind::MatchCase,
            )
        }
        RuleKind::R46 => {
            (
                Node::OptParenthesizedCommaSeparatedIdentsOrUnderscores(OptParenthesizedCommaSeparatedIdentsOrUnderscores::None),
                NonterminalKind::OptParenthesizedCommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R47 => {
            let t0 = Box::new(ParenthesizedCommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptParenthesizedCommaSeparatedIdentsOrUnderscores(OptParenthesizedCommaSeparatedIdentsOrUnderscores::Some(
                    t0,
                )),
                NonterminalKind::OptParenthesizedCommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R48 => {
            let rparen_2 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let idents_1 = Box::new(CommaSeparatedIdentsOrUnderscores::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::ParenthesizedCommaSeparatedIdentsOrUnderscores(ParenthesizedCommaSeparatedIdentsOrUnderscores {
                    lparen: lparen_0,
                    idents: idents_1,
                    rparen: rparen_2,
                }),
                NonterminalKind::ParenthesizedCommaSeparatedIdentsOrUnderscores,
            )
        }
        RuleKind::R49 => {
            let innards_2 = Box::new(FunCommonInnards::try_from(nodes.pop().unwrap()).ok().unwrap());
            let name_1 = Box::new(OptIdent::try_from(nodes.pop().unwrap()).ok().unwrap());
            let afunkw_0 = nodes.pop().unwrap().try_into_afun_kw_15().ok().unwrap();
            
            states.truncate(states.len() - 3);
            
            (
                Node::Afun(Afun {
                    afunkw: afunkw_0,
                    name: name_1,
                    innards: innards_2,
                }),
                NonterminalKind::Afun,
            )
        }
        RuleKind::R50 => {
            (
                Node::OptIdent(OptIdent::None),
                NonterminalKind::OptIdent,
            )
        }
        RuleKind::R51 => {
            let t0 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::OptIdent(OptIdent::Some(
                    t0,
                )),
                NonterminalKind::OptIdent,
            )
        }
        RuleKind::R52 => {
            let rparen_3 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let args_2 = Box::new(CommaSeparatedExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lparen_1 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let callee_0 = Box::new(VarOrApp::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 4);
            
            (
                Node::App(App {
                    callee: callee_0,
                    lparen: lparen_1,
                    args: args_2,
                    rparen: rparen_3,
                }),
                NonterminalKind::App,
            )
        }
        RuleKind::R53 => {
            let t0 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::VarOrApp(VarOrApp::Var(
                    t0,
                )),
                NonterminalKind::VarOrApp,
            )
        }
        RuleKind::R54 => {
            let t0 = Box::new(App::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::VarOrApp(VarOrApp::App(
                    t0,
                )),
                NonterminalKind::VarOrApp,
            )
        }
        RuleKind::R55 => {
            let t0 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::CommaSeparatedExprs(CommaSeparatedExprs::One(
                    t0,
                )),
                NonterminalKind::CommaSeparatedExprs,
            )
        }
        RuleKind::R56 => {
            let t2 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let t0 = Box::new(CommaSeparatedExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 3);
            
            (
                Node::CommaSeparatedExprs(CommaSeparatedExprs::Snoc(
                    t0,
                    t2,
                )),
                NonterminalKind::CommaSeparatedExprs,
            )
        }
        RuleKind::R57 => {
            let return_type_3 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let params_1 = Box::new(ParenthesizedCommaSeparatedParamDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let forkw_0 = nodes.pop().unwrap().try_into_for_kw_16().ok().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::For(For {
                    forkw: forkw_0,
                    params: params_1,
                    return_type: return_type_3,
                }),
                NonterminalKind::For,
            )
        }
        RuleKind::R58 => {
            let t0 = nodes.pop().unwrap().try_into_ident_20().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::IdentOrUnderscore(IdentOrUnderscore::Ident(
                    t0,
                )),
                NonterminalKind::IdentOrUnderscore,
            )
        }
        RuleKind::R59 => {
            let t0 = nodes.pop().unwrap().try_into_underscore_9().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::IdentOrUnderscore(IdentOrUnderscore::Underscore(
                    t0,
                )),
                NonterminalKind::IdentOrUnderscore,
            )
        }
    }
}

impl QuasiterminalKind {
    fn from_quasiterminal(quasiterminal: &Quasiterminal) -> Self {
        match quasiterminal {
            Quasiterminal::Terminal(terminal) => Self::from_terminal(terminal),
            Quasiterminal::Eof => Self::Eof,
        }
    }

    fn from_terminal(terminal: &Token) -> Self {
        match terminal {
            Token::LParen(_) => Self::LParen,
            Token::RParen(_) => Self::RParen,
            Token::LSquare(_) => Self::LSquare,
            Token::RSquare(_) => Self::RSquare,
            Token::Eq(_) => Self::Eq,
            Token::Colon(_) => Self::Colon,
            Token::Comma(_) => Self::Comma,
            Token::ThinArrow(_) => Self::ThinArrow,
            Token::Dash(_) => Self::Dash,
            Token::Underscore(_) => Self::Underscore,
            Token::LetKw(_) => Self::LetKw,
            Token::IndKw(_) => Self::IndKw,
            Token::FunKw(_) => Self::FunKw,
            Token::AindKw(_) => Self::AindKw,
            Token::MatchKw(_) => Self::MatchKw,
            Token::AfunKw(_) => Self::AfunKw,
            Token::ForKw(_) => Self::ForKw,
            Token::CaseKw(_) => Self::CaseKw,
            Token::ReturnKw(_) => Self::ReturnKw,
            Token::UseKw(_) => Self::UseKw,
            Token::Ident(_) => Self::Ident,
            Token::Number(_) => Self::Number,
            Token::String(_) => Self::String,
            Token::Universe(_) => Self::Universe,
            Token::VconIndex(_) => Self::VconIndex,
            Token::ReturnArity(_) => Self::ReturnArity,
        }
    }
}

impl Node {
    fn from_terminal(terminal: Token) -> Self {
        match terminal {
            Token::LParen(t) => Self::LParen(t),
            Token::RParen(t) => Self::RParen(t),
            Token::LSquare(t) => Self::LSquare(t),
            Token::RSquare(t) => Self::RSquare(t),
            Token::Eq(t) => Self::Eq(t),
            Token::Colon(t) => Self::Colon(t),
            Token::Comma(t) => Self::Comma(t),
            Token::ThinArrow(t) => Self::ThinArrow(t),
            Token::Dash(t) => Self::Dash(t),
            Token::Underscore(t) => Self::Underscore(t),
            Token::LetKw(t) => Self::LetKw(t),
            Token::IndKw(t) => Self::IndKw(t),
            Token::FunKw(t) => Self::FunKw(t),
            Token::AindKw(t) => Self::AindKw(t),
            Token::MatchKw(t) => Self::MatchKw(t),
            Token::AfunKw(t) => Self::AfunKw(t),
            Token::ForKw(t) => Self::ForKw(t),
            Token::CaseKw(t) => Self::CaseKw(t),
            Token::ReturnKw(t) => Self::ReturnKw(t),
            Token::UseKw(t) => Self::UseKw(t),
            Token::Ident(t) => Self::Ident(t),
            Token::Number(t) => Self::Number(t),
            Token::String(t) => Self::String(t),
            Token::Universe(t) => Self::Universe(t),
            Token::VconIndex(t) => Self::VconIndex(t),
            Token::ReturnArity(t) => Self::ReturnArity(t),
        }
    }
}

impl Quasiterminal {
    fn try_into_terminal(self) -> Result<Token, ()> {
        match self {
            Self::Terminal(terminal) => Ok(terminal),
            Self::Eof => Err(()),
        }
    }
}

const ACTION_TABLE: [[Action; 27]; 113] = [
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S25),
        Action::Shift(State::S28),
        Action::Shift(State::S66),
        Action::Shift(State::S30),
        Action::Shift(State::S9),
        Action::Shift(State::S99),
        Action::Shift(State::S47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S104),
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Shift(State::S31),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
    ],
    [
        Action::Shift(State::S13),
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S26),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S6),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S33),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R13),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R13),
        Action::Reduce(RuleKind::R13),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S39),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Shift(State::S48),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R23),
        Action::Reduce(RuleKind::R23),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R26),
        Action::Reduce(RuleKind::R26),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S60),
        Action::Shift(State::S37),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S38),
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R14),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R14),
        Action::Reduce(RuleKind::R14),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R16),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R16),
        Action::Reduce(RuleKind::R16),
        Action::Err,
        Action::Reduce(RuleKind::R16),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S56),
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S44),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S51),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R17),
        Action::Err,
        Action::Reduce(RuleKind::R17),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R17),
        Action::Reduce(RuleKind::R17),
        Action::Err,
        Action::Reduce(RuleKind::R17),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S56),
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R18),
        Action::Err,
        Action::Reduce(RuleKind::R18),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R18),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S58),
        Action::Err,
        Action::Err,
        Action::Shift(State::S51),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S56),
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R19),
        Action::Err,
        Action::Reduce(RuleKind::R19),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R19),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S111),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S110),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S11),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R20),
        Action::Err,
        Action::Reduce(RuleKind::R20),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R20),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R22),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R22),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R24),
        Action::Reduce(RuleKind::R24),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R25),
        Action::Reduce(RuleKind::R25),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R27),
        Action::Reduce(RuleKind::R27),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S40),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S63),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R29),
        Action::Reduce(RuleKind::R29),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R28),
        Action::Reduce(RuleKind::R28),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Shift(State::S14),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S65),
        Action::Err,
        Action::Err,
        Action::Shift(State::S12),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R30),
        Action::Reduce(RuleKind::R30),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S45),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
        Action::Reduce(RuleKind::R31),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S7),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
        Action::Reduce(RuleKind::R32),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
        Action::Reduce(RuleKind::R33),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
        Action::Reduce(RuleKind::R34),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R43),
        Action::Err,
        Action::Reduce(RuleKind::R43),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R43),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S93),
        Action::Err,
        Action::Shift(State::S76),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S75),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
        Action::Reduce(RuleKind::R35),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R36),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R36),
        Action::Reduce(RuleKind::R36),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Shift(State::S84),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S77),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S81),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S78),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R37),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R37),
        Action::Reduce(RuleKind::R37),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S80),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R38),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R38),
        Action::Reduce(RuleKind::R38),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Shift(State::S84),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S83),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R39),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R39),
        Action::Reduce(RuleKind::R39),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S111),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S110),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S86),
        Action::Err,
        Action::Err,
        Action::Shift(State::S90),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R40),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S111),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S110),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R41),
        Action::Err,
        Action::Reduce(RuleKind::R41),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R41),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S98),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S90),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S111),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S110),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R42),
        Action::Err,
        Action::Reduce(RuleKind::R42),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R44),
        Action::Err,
        Action::Reduce(RuleKind::R44),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R44),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S94),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S87),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R46),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S10),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R45),
        Action::Err,
        Action::Reduce(RuleKind::R45),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R45),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R47),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R48),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R50),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S101),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
        Action::Reduce(RuleKind::R49),
    ],
    [
        Action::Reduce(RuleKind::R51),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S103),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S12),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Err,
        Action::Reduce(RuleKind::R52),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R52),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Err,
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
        Action::Reduce(RuleKind::R52),
    ],
    [
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Err,
        Action::Reduce(RuleKind::R53),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R53),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Err,
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
        Action::Reduce(RuleKind::R53),
    ],
    [
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Err,
        Action::Reduce(RuleKind::R54),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R54),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Err,
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
        Action::Reduce(RuleKind::R54),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R55),
        Action::Err,
        Action::Reduce(RuleKind::R55),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R55),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R56),
        Action::Err,
        Action::Reduce(RuleKind::R56),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R56),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S5),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
        Action::Reduce(RuleKind::R57),
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R58),
        Action::Err,
        Action::Reduce(RuleKind::R58),
        Action::Err,
        Action::Reduce(RuleKind::R58),
        Action::Reduce(RuleKind::R58),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Reduce(RuleKind::R59),
        Action::Err,
        Action::Reduce(RuleKind::R59),
        Action::Err,
        Action::Reduce(RuleKind::R59),
        Action::Reduce(RuleKind::R59),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Accept,
    ],
];

fn get_action(top_state: State, next_quasiterminal_kind: QuasiterminalKind) -> Action {
    ACTION_TABLE[top_state as usize][next_quasiterminal_kind as usize]
}

const GOTO_TABLE: [[Option<State>; 34]; 113] = [
    [
        Some(State::S27),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S29),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S67),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S69),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S74),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S109),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S0),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S3),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        Some(State::S72),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S96),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S55),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S107),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        Some(State::S106),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        Some(State::S102),
        Some(State::S22),
        None,
    ],
    [
        Some(State::S106),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        Some(State::S64),
        Some(State::S22),
        None,
    ],
    [
        Some(State::S112),
        Some(State::S8),
        Some(State::S16),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
        Some(State::S20),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S21),
        None,
        Some(State::S105),
        Some(State::S23),
        None,
        Some(State::S22),
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        Some(State::S1),
        None,
        Some(State::S32),
        Some(State::S41),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        Some(State::S70),
        None,
        Some(State::S32),
        Some(State::S41),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        Some(State::S71),
        None,
        Some(State::S32),
        Some(State::S41),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        Some(State::S34),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S35),
        Some(State::S57),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S36),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S59),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        Some(State::S61),
        Some(State::S41),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S43),
        Some(State::S49),
        Some(State::S53),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S68),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S68),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S100),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S108),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S50),
        Some(State::S49),
        Some(State::S53),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S52),
        Some(State::S53),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S54),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S62),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S73),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S4),
        None,
        None,
        None,
        Some(State::S92),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S79),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S82),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S85),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S88),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S89),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S88),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S91),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S95),
        Some(State::S97),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S46),
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
];

fn get_goto(top_state: State, new_node_kind: NonterminalKind) -> Option<State> {
    GOTO_TABLE[top_state as usize][new_node_kind as usize]
}

impl TryFrom<Node> for Expr {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Expr(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Let {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Let(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Ind {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Ind(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for IndCommonInnards {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::IndCommonInnards(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptString {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptString(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptParenthesizedParamDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptParenthesizedParamDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ParenthesizedCommaSeparatedParamDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ParenthesizedCommaSeparatedParamDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for CommaSeparatedParamDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::CommaSeparatedParamDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ParamDef {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ParamDef(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptDash {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptDash(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptSquareBracketedParamDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptSquareBracketedParamDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for SquareBracketedParamDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::SquareBracketedParamDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ZeroOrMoreIndCases {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ZeroOrMoreIndCases(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for IndCase {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::IndCase(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptColonSquareBracketedExprs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptColonSquareBracketedExprs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Fun {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Fun(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for FunCommonInnards {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::FunCommonInnards(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Aind {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Aind(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Vcon {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Vcon(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Match {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Match(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ReturnArityClause {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ReturnArityClause(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for SquareBracketedCommaSeparatedIdentsOrUnderscores {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::SquareBracketedCommaSeparatedIdentsOrUnderscores(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for CommaSeparatedIdentsOrUnderscores {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::CommaSeparatedIdentsOrUnderscores(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ZeroOrMoreMatchCases {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ZeroOrMoreMatchCases(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for MatchCase {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::MatchCase(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptParenthesizedCommaSeparatedIdentsOrUnderscores {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptParenthesizedCommaSeparatedIdentsOrUnderscores(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ParenthesizedCommaSeparatedIdentsOrUnderscores {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ParenthesizedCommaSeparatedIdentsOrUnderscores(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Afun {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Afun(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for OptIdent {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::OptIdent(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for App {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::App(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for VarOrApp {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::VarOrApp(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for CommaSeparatedExprs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::CommaSeparatedExprs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for For {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::For(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for IdentOrUnderscore {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::IdentOrUnderscore(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl Node {
    fn try_into_l_paren_0(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::LParen(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_r_paren_1(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::RParen(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_l_square_2(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::LSquare(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_r_square_3(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::RSquare(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_eq_4(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::Eq(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_colon_5(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::Colon(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_comma_6(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::Comma(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_thin_arrow_7(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::ThinArrow(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_dash_8(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::Dash(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_underscore_9(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::Underscore(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_let_kw_10(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::LetKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_ind_kw_11(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::IndKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_fun_kw_12(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::FunKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_aind_kw_13(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::AindKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_match_kw_14(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::MatchKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_afun_kw_15(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::AfunKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_for_kw_16(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::ForKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_case_kw_17(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::CaseKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_return_kw_18(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::ReturnKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_use_kw_19(self) -> Result<crate::token::ByteIndex, Self> {
        match self {
            Self::UseKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_ident_20(self) -> Result<crate::token::Ident, Self> {
        match self {
            Self::Ident(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_number_21(self) -> Result<crate::token::NumberLiteral, Self> {
        match self {
            Self::Number(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_string_22(self) -> Result<crate::token::StringLiteral, Self> {
        match self {
            Self::String(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_universe_23(self) -> Result<crate::token::UniverseLiteral, Self> {
        match self {
            Self::Universe(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_vcon_index_24(self) -> Result<crate::token::VconIndexLiteral, Self> {
        match self {
            Self::VconIndex(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_return_arity_25(self) -> Result<crate::token::ReturnArityLiteral, Self> {
        match self {
            Self::ReturnArity(t) => Ok(t),
            _ => Err(self),
        }
    }
}
