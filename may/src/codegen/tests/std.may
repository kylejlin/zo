// ================================================================
// Unit
// ================================================================

ind Unit
    case unit
    return Prop0

// ================================================================
// Bool
// ================================================================

ind Bool
    case true
    case false
    return Set0

fun not(b: Bool): Bool
    match b
    case true:
        false
    case false:
        true
    return1 Bool

fun and(a: Bool, b: Bool): Bool
    match a
    case true:
        b
    case false:
        false
    return1 Bool

fun or(a: Bool, b: Bool): Bool
    match a
    case true:
        true
    case false:
        b
    return1 Bool

fun bool_eq(a: Bool, b: Bool): Bool
    match a
    case true:
        b
    case false:
        not(b)
    return1 Bool

fun bool_neq(a: Bool, b: Bool): Bool
    not(bool_eq(a, b))

// ================================================================
// Bit
// ================================================================

ind Bit
    case b0
    case b1
    return Set0

fun bit_eq(a: Bit, b: Bit): Bool
    match a
    case b0:
        match b
        case b0:
            true
        case b1:
            false
        return1 Bool
    case b1:
        match b
        case b0:
            false
        case b1:
            true
        return1 Bool
    return1 Bool

fun bit_neq(a: Bit, b: Bit): Bool
    not(bit_eq(a, b))

// ================================================================
// Pos
// ================================================================

ind Pos
    case pos_one
    case pos_snoc(left: Pos, right: Bit)
    return Set0

fun pos_succ(-a: Pos): Pos
    match a
    case pos_one:
        pos_snoc(pos_one, b0)
    case pos_snoc(left, right):
        match right
        case b0:
            pos_snoc(left, b1)
        case b1:
            pos_snoc(pos_succ(left), b0)
        return1 Pos
    return1 Pos

fun pos_add(-a: Pos, b: Pos): Pos
    match a
    case pos_one:
        pos_succ(b)
    case pos_snoc(a_left, a_right):
        match b
        case pos_one:
            pos_succ(a)
        case pos_snoc(b_left, b_right):
            match a_right
            case b0:
                pos_snoc(pos_add(a_left, b_left), b_right)
            case b1:
                match b_right
                case b0:
                    pos_snoc(pos_add(a_left, b_left), b1)
                case b1:
                    pos_snoc(pos_add(a_left, pos_succ(b_left)), b0)
                return1 Pos
            return1 Pos
        return1 Pos
    return1 Pos

fun pos_mult(-a: Pos, b: Pos): Pos
    match a
    case pos_one:
        b
    case pos_snoc(a_left, a_right):
        let a_left_times_2b = pos_snoc(pos_mult(a_left, b), b0)
        match a_right
        case b0:
            a_left_times_2b
        case b1:
            pos_add(b, a_left_times_2b)
        return1 Pos
    return1 Pos

// ================================================================
// Exists
// ================================================================

ind(T: Set0, P: For(_: T) -> Prop0) Exists
    case exists(witness: T, proof: P(witness))
    return Prop0

// ================================================================
// Misc syntax test
// ================================================================
// TODO: Delete this section

let x = vcon1 Dummy "CustomDummy" [_: Pos]
    case dummy_a: [pos_one]
    case dummy_b: [pos_one]
    return Prop0

let y = match x
    case dummy_a:
        pos_one
    case dummy_b:
        pos_one
    use _matchee: [_index_arg] return Pos

// ================================================================
// Dummy leaf
//
// - If you want to use the above library,
//   delete this `Dummy leaf` section,
//   and add your code below.
// ================================================================

aind DummyLeaf
    return Prop0
