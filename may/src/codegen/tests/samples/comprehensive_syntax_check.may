ind Nat
    case zero
    case succ(_: Nat)
    return Set0

let _2 = succ(succ(zero))

ind(T: Set0, t: T) Foo "Eq" [right: T]
    case foo_refl: [t]
    return Prop0

let Empty = aind Empty return Prop0

let Eq = aind(T: Set0, t: T) Eq [right: T]
    case refl: [t]
    return Prop0

let refl = vcon0(T: Set0, t: T) Bar "Eq" [right: T]
    case refl: [t]
    return Prop0

fun assert_type_prop0(T: Prop0, t: T): T
    t

let _dummy = assert_type_prop0(Foo(Nat, zero)(zero), foo_refl(Nat, zero))
let _dummy = assert_type_prop0(Foo(Nat, zero)(zero), refl(Nat, zero))

let _dummy = assert_type_prop0(Eq(Nat, zero)(zero), foo_refl(Nat, zero))
let _dummy = assert_type_prop0(Eq(Nat, zero)(zero), refl(Nat, zero))

fun add(-a: Nat, b: Nat): Nat
    match a
    case zero:
        b
    case succ(pred):
        succ(add(pred, b))
    return1 Nat

let mul = afun m(-a: Nat, b: Nat): Nat
    match a
    case zero:
        zero
    case succ(pred):
        add(b, m(pred, b))
    return1 Nat

ind(A: Prop0, B: Prop0) Or
    case inl(_: A)
    case inr(_: B)
    return Prop0

ind(T: Set0, P: For(_: T) -> Prop0) Exists
    case exists(witness: T, sat_p: P(witness))
    return Prop0

fun nat_destruct(n: Nat, bail: For(P: Prop0) -> P): Or(Eq(Nat, zero)(n), Exists(Nat, afun(m: Nat): Prop0 Eq(Nat, succ(m))(n)))
    match n
    case zero:
        let inl = inl(Eq(Nat, zero)(zero), Exists(Nat, afun(m: Nat): Prop0 Eq(Nat, succ(m))(zero)))
        inl(refl(Nat, zero))
    case succ(n_pred):
        let inr = inr(Eq(Nat, zero)(succ(n_pred)), Exists(Nat, afun(m: Nat): Prop0 Eq(Nat, succ(m))(succ(n_pred))))
        let exists = exists(Nat, afun(m: Nat): Prop0 Eq(Nat, succ(m))(succ(n_pred)))
        inr(exists(n_pred, refl(Nat, succ(n_pred))))
    use n2 return1 Or(Eq(Nat, zero)(n2), Exists(Nat, afun(m: Nat): Prop0 Eq(Nat, succ(m))(n2)))

fun eq_commutative(T: Set0, a: T, b: T, eq: Eq(T, a)(b)): Eq(T, b)(a)
    match eq
    case refl:
        refl(T, a)
    use [c] return Eq(T, c)(a)

fun eq_commutative_with_matchee_dummy(T: Set0, a: T, b: T, eq: Eq(T, a)(b)): Eq(T, b)(a)
    match eq
    case refl:
        refl(T, a)
    use _matchee_dummy: [c] return Eq(T, c)(a)

_dummy
