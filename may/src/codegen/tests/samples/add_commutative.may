ind(T: Set0, left: T) Eq[_: T]
    case refl: [left]
    return Prop0

ind Nat
    case zero
    case succ(_: Nat)
    return Set0

fun add(-a: Nat, b: Nat): Nat
    match a
    case zero:
        b
    case succ(a_pred):
        succ(add(a_pred, b))
    return1 Nat

fun add_n_zero(-n: Nat): Eq(Nat, n)(add(n, zero))
    match n
    case zero:
        refl(Nat, zero)
    case succ(n_pred):
        match add_n_zero(n_pred)
        case refl:
            refl(Nat, succ(n_pred))
        use [in_n_pred_out_add_n_pred_zero]
        return Eq(Nat, succ(n_pred))(succ(in_n_pred_out_add_n_pred_zero))
    use n_capp
    return1 Eq(Nat, n_capp)(add(n_capp, zero))

fun add_n_succ_m(-n: Nat, m: Nat): Eq(Nat, succ(add(n, m)))(add(n, succ(m)))
    match n
    case zero:
        refl(Nat, succ(m))
    case succ(n_pred):
        // Goal: Eq(Nat, succ(succ(add(n_pred, m))))(succ(add(n_pred, succ(m))))
        match add_n_succ_m(n_pred, m)
        case refl:
            refl(Nat, succ(succ(add(n_pred, m))))
        use [in_succ_add_out_add_succ]
        return Eq(Nat, succ(succ(add(n_pred, m))))(succ(in_succ_add_out_add_succ))
    use n_capp
    return1 Eq(Nat, succ(add(n_capp, m)))(add(n_capp, succ(m)))

afun add_commutative(-n: Nat, m: Nat): Eq(Nat, add(n, m))(add(m, n))
    match n
    case zero:
        match add_n_zero(m)
        case refl:
            refl(Nat, m)
        use [in_m_out_add_m_zero]
        return Eq(Nat, m)(in_m_out_add_m_zero)
    case succ(n_pred):
        // Goal: Eq(Nat, succ(add(n_pred, m)))(add(m, succ(n_pred)))
        match add_n_succ_m(m, n_pred)
        case refl:
            // Goal: Eq(Nat, succ(add(n_pred, m)))(succ(add(m, n_pred)))
            match add_commutative(n_pred, m)
            case refl:
                refl(Nat, succ(add(n_pred, m)))
            use [in_npred_m_out_m_apred]
            return Eq(Nat, succ(add(n_pred, m)))(succ(in_npred_m_out_m_apred))
        use [in_succ_add_out_add_succ]
        return Eq(Nat, succ(add(n_pred, m)))(in_succ_add_out_add_succ)
    use n_capp
    return1 Eq(Nat, add(n_capp, m))(add(m, n_capp))
    