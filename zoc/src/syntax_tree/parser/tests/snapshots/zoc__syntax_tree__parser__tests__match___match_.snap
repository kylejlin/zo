---
source: zoc/src/syntax_tree/parser/tests/match_.rs
expression: "&cst"
---
Match(
    Match {
        lparen: ByteIndex(
            1,
        ),
        matchee: Deb(
            NumberLiteral {
                value: 0,
                span: (
                    ByteIndex(
                        33,
                    ),
                    ByteIndex(
                        34,
                    ),
                ),
            },
        ),
        return_type_arity: NumberLiteral {
            value: 3,
            span: (
                ByteIndex(
                    60,
                ),
                ByteIndex(
                    61,
                ),
            ),
        },
        return_type: For(
            For {
                lparen: ByteIndex(
                    85,
                ),
                param_types_lparen: ByteIndex(
                    90,
                ),
                param_types: Snoc(
                    Nil,
                    Deb(
                        NumberLiteral {
                            value: 500,
                            span: (
                                ByteIndex(
                                    91,
                                ),
                                ByteIndex(
                                    94,
                                ),
                            ),
                        },
                    ),
                ),
                param_types_rparen: ByteIndex(
                    94,
                ),
                return_type: Deb(
                    NumberLiteral {
                        value: 600,
                        span: (
                            ByteIndex(
                                96,
                            ),
                            ByteIndex(
                                99,
                            ),
                        ),
                    },
                ),
                rparen: ByteIndex(
                    99,
                ),
            },
        ),
        cases_lparen: ByteIndex(
            119,
        ),
        cases: Snoc(
            Snoc(
                Snoc(
                    Nil,
                    MatchCase {
                        lparen: ByteIndex(
                            129,
                        ),
                        arity: NumberLiteral {
                            value: 0,
                            span: (
                                ByteIndex(
                                    130,
                                ),
                                ByteIndex(
                                    131,
                                ),
                            ),
                        },
                        return_val: Deb(
                            NumberLiteral {
                                value: 1,
                                span: (
                                    ByteIndex(
                                        132,
                                    ),
                                    ByteIndex(
                                        133,
                                    ),
                                ),
                            },
                        ),
                        rparen: ByteIndex(
                            133,
                        ),
                    },
                ),
                MatchCase {
                    lparen: ByteIndex(
                        144,
                    ),
                    arity: NumberLiteral {
                        value: 3,
                        span: (
                            ByteIndex(
                                145,
                            ),
                            ByteIndex(
                                146,
                            ),
                        ),
                    },
                    return_val: Deb(
                        NumberLiteral {
                            value: 400,
                            span: (
                                ByteIndex(
                                    147,
                                ),
                                ByteIndex(
                                    150,
                                ),
                            ),
                        },
                    ),
                    rparen: ByteIndex(
                        150,
                    ),
                },
            ),
            MatchCase {
                lparen: ByteIndex(
                    161,
                ),
                arity: NumberLiteral {
                    value: 1,
                    span: (
                        ByteIndex(
                            162,
                        ),
                        ByteIndex(
                            163,
                        ),
                    ),
                },
                return_val: Deb(
                    NumberLiteral {
                        value: 2,
                        span: (
                            ByteIndex(
                                164,
                            ),
                            ByteIndex(
                                165,
                            ),
                        ),
                    },
                ),
                rparen: ByteIndex(
                    165,
                ),
            },
        ),
        cases_rparen: ByteIndex(
            171,
        ),
        rparen: ByteIndex(
            173,
        ),
    },
)
