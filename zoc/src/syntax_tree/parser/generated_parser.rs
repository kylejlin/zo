// This code was generated by Kiki.
// Kiki is an open-source minimalist parser generator for Rust.
// You can read more at https://crates.io/crates/kiki
//
// This code was generated from a grammar with the following hash:
// @sha256 6ac21ed00821cb12f9b715c5f7e52bb88a2639aec5ab21c4455199f232fa6bf2

// Since this code is automatically generated,
// some parts may be unidiomatic.
// The linter often complains about these parts.
// However, these warnings are not useful.
// Therefore, we disable certain lints for this file.
#![allow(non_snake_case)]
#![allow(dead_code)]

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Token {
    LParen(crate::syntax_tree::token::ByteIndex),
    RParen(crate::syntax_tree::token::ByteIndex),
    IndKw(crate::syntax_tree::token::ByteIndex),
    VconKw(crate::syntax_tree::token::ByteIndex),
    MatchKw(crate::syntax_tree::token::ByteIndex),
    FunKw(crate::syntax_tree::token::ByteIndex),
    ForKw(crate::syntax_tree::token::ByteIndex),
    NonrecKw(crate::syntax_tree::token::ByteIndex),
    Number(crate::syntax_tree::token::NumberLiteral),
    String(crate::syntax_tree::token::StringLiteral),
    Universe(crate::syntax_tree::token::UniverseLiteral),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum Expr {
    Ind(
        Box<Ind>,
    ),
    Vcon(
        Box<Vcon>,
    ),
    Match(
        Box<Match>,
    ),
    Fun(
        Box<Fun>,
    ),
    App(
        Box<App>,
    ),
    For(
        Box<For>,
    ),
    Deb(
        crate::syntax_tree::token::NumberLiteral,
    ),
    Universe(
        crate::syntax_tree::token::UniverseLiteral,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Ind {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub type_: crate::syntax_tree::token::UniverseLiteral,
    pub name: crate::syntax_tree::token::StringLiteral,
    pub index_types_lparen: crate::syntax_tree::token::ByteIndex,
    pub index_types: Box<ZeroOrMoreExprs>,
    pub index_types_rparen: crate::syntax_tree::token::ByteIndex,
    pub vcon_defs_lparen: crate::syntax_tree::token::ByteIndex,
    pub vcon_defs: Box<ZeroOrMoreVconDefs>,
    pub vcon_defs_rparen: crate::syntax_tree::token::ByteIndex,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ZeroOrMoreExprs {
    Nil,
    Snoc(
        Box<ZeroOrMoreExprs>,
        Box<Expr>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ZeroOrMoreVconDefs {
    Nil,
    Snoc(
        Box<ZeroOrMoreVconDefs>,
        Box<VconDef>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct VconDef {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub param_types_lparen: crate::syntax_tree::token::ByteIndex,
    pub param_types: Box<ZeroOrMoreExprs>,
    pub param_types_rparen: crate::syntax_tree::token::ByteIndex,
    pub index_args_lparen: crate::syntax_tree::token::ByteIndex,
    pub index_args: Box<ZeroOrMoreExprs>,
    pub index_args_rparen: crate::syntax_tree::token::ByteIndex,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Vcon {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub ind: Box<Ind>,
    pub vcon_index: crate::syntax_tree::token::NumberLiteral,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Match {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub matchee: Box<Expr>,
    pub return_type_arity: crate::syntax_tree::token::NumberLiteral,
    pub return_type: Box<Expr>,
    pub cases_lparen: crate::syntax_tree::token::ByteIndex,
    pub cases: Box<ZeroOrMoreMatchCases>,
    pub cases_rparen: crate::syntax_tree::token::ByteIndex,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum ZeroOrMoreMatchCases {
    Nil,
    Snoc(
        Box<ZeroOrMoreMatchCases>,
        Box<MatchCase>,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct MatchCase {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub arity: crate::syntax_tree::token::NumberLiteral,
    pub return_val: Box<Expr>,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Fun {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub decreasing_index: Box<NumberOrNonrecKw>,
    pub param_types_lparen: crate::syntax_tree::token::ByteIndex,
    pub param_types: Box<ZeroOrMoreExprs>,
    pub param_types_rparen: crate::syntax_tree::token::ByteIndex,
    pub return_type: Box<Expr>,
    pub return_val: Box<Expr>,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub enum NumberOrNonrecKw {
    Number(
        crate::syntax_tree::token::NumberLiteral,
    ),
    NonrecKw(
        crate::syntax_tree::token::ByteIndex,
    ),
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct App {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub callee: Box<Expr>,
    pub args: Box<ZeroOrMoreExprs>,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct For {
    pub lparen: crate::syntax_tree::token::ByteIndex,
    pub param_types_lparen: crate::syntax_tree::token::ByteIndex,
    pub param_types: Box<ZeroOrMoreExprs>,
    pub param_types_rparen: crate::syntax_tree::token::ByteIndex,
    pub return_type: Box<Expr>,
    pub rparen: crate::syntax_tree::token::ByteIndex,
}

/// If the parser encounters an unexpected token `t`, it will return `Err(Some(t))`.
/// If the parser encounters an unexpected end of input, it will return `Err(None)`.
pub fn parse<S>(src: S) -> Result<Expr, Option<Token>>
where S: IntoIterator<Item = Token> {
    let mut quasiterminals = src.into_iter()
        .map(Quasiterminal::Terminal)
        .chain(std::iter::once(Quasiterminal::Eof))
        .peekable();
    let mut states = vec![State::S14];
    let mut nodes: Vec<Node> = vec![];
    loop {
        let top_state = *states.last().unwrap();
        let next_quasiterminal_kind = QuasiterminalKind::from_quasiterminal(quasiterminals.peek().unwrap());
        match get_action(top_state, next_quasiterminal_kind) {
            Action::Shift(new_state) => {
                states.push(new_state);
                nodes.push(Node::from_terminal(quasiterminals.next().unwrap().try_into_terminal().unwrap()));
            }

            Action::Reduce(rule_kind) => {
                let (new_node, new_node_kind) = pop_and_reduce(&mut states, &mut nodes, rule_kind);
                nodes.push(new_node);
                let temp_top_state = *states.last().unwrap();
                let Some(new_state) = get_goto(temp_top_state, new_node_kind) else {
                    return Err(quasiterminals.next().unwrap().try_into_terminal().ok());
                };
                states.push(new_state);
            }

            Action::Accept => {
                return Ok(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            }

            Action::Err => {
                return Err(quasiterminals.next().unwrap().try_into_terminal().ok());
            }
        }
    }
}

enum Quasiterminal {
    Terminal(Token),
    Eof,
}

#[derive(Clone, Copy, Debug)]
enum QuasiterminalKind {
    LParen = 0,
    RParen = 1,
    IndKw = 2,
    VconKw = 3,
    MatchKw = 4,
    FunKw = 5,
    ForKw = 6,
    NonrecKw = 7,
    Number = 8,
    String = 9,
    Universe = 10,
    Eof = 11,
}

#[derive(Clone, Copy, Debug)]
enum NonterminalKind {
    Expr = 0,
    Ind = 1,
    ZeroOrMoreExprs = 2,
    ZeroOrMoreVconDefs = 3,
    VconDef = 4,
    Vcon = 5,
    Match = 6,
    ZeroOrMoreMatchCases = 7,
    MatchCase = 8,
    Fun = 9,
    NumberOrNonrecKw = 10,
    App = 11,
    For = 12,
}

#[derive(Clone, Copy, Debug)]
enum State {
    S0 = 0,
    S1 = 1,
    S2 = 2,
    S3 = 3,
    S4 = 4,
    S5 = 5,
    S6 = 6,
    S7 = 7,
    S8 = 8,
    S9 = 9,
    S10 = 10,
    S11 = 11,
    S12 = 12,
    S13 = 13,
    S14 = 14,
    S15 = 15,
    S16 = 16,
    S17 = 17,
    S18 = 18,
    S19 = 19,
    S20 = 20,
    S21 = 21,
    S22 = 22,
    S23 = 23,
    S24 = 24,
    S25 = 25,
    S26 = 26,
    S27 = 27,
    S28 = 28,
    S29 = 29,
    S30 = 30,
    S31 = 31,
    S32 = 32,
    S33 = 33,
    S34 = 34,
    S35 = 35,
    S36 = 36,
    S37 = 37,
    S38 = 38,
    S39 = 39,
    S40 = 40,
    S41 = 41,
    S42 = 42,
    S43 = 43,
    S44 = 44,
    S45 = 45,
    S46 = 46,
    S47 = 47,
    S48 = 48,
    S49 = 49,
    S50 = 50,
    S51 = 51,
    S52 = 52,
    S53 = 53,
    S54 = 54,
    S55 = 55,
    S56 = 56,
    S57 = 57,
    S58 = 58,
    S59 = 59,
    S60 = 60,
    S61 = 61,
    S62 = 62,
    S63 = 63,
    S64 = 64,
    S65 = 65,
    S66 = 66,
    S67 = 67,
}

enum Node {
    Expr(Expr),
    Ind(Ind),
    ZeroOrMoreExprs(ZeroOrMoreExprs),
    ZeroOrMoreVconDefs(ZeroOrMoreVconDefs),
    VconDef(VconDef),
    Vcon(Vcon),
    Match(Match),
    ZeroOrMoreMatchCases(ZeroOrMoreMatchCases),
    MatchCase(MatchCase),
    Fun(Fun),
    NumberOrNonrecKw(NumberOrNonrecKw),
    App(App),
    For(For),
    LParen(crate::syntax_tree::token::ByteIndex),
    RParen(crate::syntax_tree::token::ByteIndex),
    IndKw(crate::syntax_tree::token::ByteIndex),
    VconKw(crate::syntax_tree::token::ByteIndex),
    MatchKw(crate::syntax_tree::token::ByteIndex),
    FunKw(crate::syntax_tree::token::ByteIndex),
    ForKw(crate::syntax_tree::token::ByteIndex),
    NonrecKw(crate::syntax_tree::token::ByteIndex),
    Number(crate::syntax_tree::token::NumberLiteral),
    String(crate::syntax_tree::token::StringLiteral),
    Universe(crate::syntax_tree::token::UniverseLiteral),
}

#[derive(Clone, Copy, Debug)]
enum Action {
    Shift(State),
    Reduce(RuleKind),
    Accept,
    Err,
}

#[derive(Clone, Copy, Debug)]
enum RuleKind {
    R0 = 0,
    R1 = 1,
    R2 = 2,
    R3 = 3,
    R4 = 4,
    R5 = 5,
    R6 = 6,
    R7 = 7,
    R8 = 8,
    R9 = 9,
    R10 = 10,
    R11 = 11,
    R12 = 12,
    R13 = 13,
    R14 = 14,
    R15 = 15,
    R16 = 16,
    R17 = 17,
    R18 = 18,
    R19 = 19,
    R20 = 20,
    R21 = 21,
    R22 = 22,
    R23 = 23,
}

fn pop_and_reduce(states: &mut Vec<State>, nodes: &mut Vec<Node>, rule_kind: RuleKind) -> (Node, NonterminalKind) {
    match rule_kind {
        RuleKind::R0 => {
            let t0 = Box::new(Ind::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Ind(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R1 => {
            let t0 = Box::new(Vcon::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Vcon(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R2 => {
            let t0 = Box::new(Match::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Match(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R3 => {
            let t0 = Box::new(Fun::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Fun(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R4 => {
            let t0 = Box::new(App::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::App(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R5 => {
            let t0 = Box::new(For::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::For(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R6 => {
            let t0 = nodes.pop().unwrap().try_into_number_8().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Deb(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R7 => {
            let t0 = nodes.pop().unwrap().try_into_universe_10().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::Expr(Expr::Universe(
                    t0,
                )),
                NonterminalKind::Expr,
            )
        }
        RuleKind::R8 => {
            let rparen_10 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let vcon_defs_rparen_9 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let vcon_defs_8 = Box::new(ZeroOrMoreVconDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let vcon_defs_lparen_7 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let index_types_rparen_6 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let index_types_5 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let index_types_lparen_4 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let name_3 = nodes.pop().unwrap().try_into_string_9().ok().unwrap();
            let type__2 = nodes.pop().unwrap().try_into_universe_10().ok().unwrap();
            nodes.pop().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 11);
            
            (
                Node::Ind(Ind {
                    lparen: lparen_0,
                    type_: type__2,
                    name: name_3,
                    index_types_lparen: index_types_lparen_4,
                    index_types: index_types_5,
                    index_types_rparen: index_types_rparen_6,
                    vcon_defs_lparen: vcon_defs_lparen_7,
                    vcon_defs: vcon_defs_8,
                    vcon_defs_rparen: vcon_defs_rparen_9,
                    rparen: rparen_10,
                }),
                NonterminalKind::Ind,
            )
        }
        RuleKind::R9 => {
            (
                Node::ZeroOrMoreExprs(ZeroOrMoreExprs::Nil),
                NonterminalKind::ZeroOrMoreExprs,
            )
        }
        RuleKind::R10 => {
            let t1 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let t0 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 2);
            
            (
                Node::ZeroOrMoreExprs(ZeroOrMoreExprs::Snoc(
                    t0,
                    t1,
                )),
                NonterminalKind::ZeroOrMoreExprs,
            )
        }
        RuleKind::R11 => {
            (
                Node::ZeroOrMoreVconDefs(ZeroOrMoreVconDefs::Nil),
                NonterminalKind::ZeroOrMoreVconDefs,
            )
        }
        RuleKind::R12 => {
            let t1 = Box::new(VconDef::try_from(nodes.pop().unwrap()).ok().unwrap());
            let t0 = Box::new(ZeroOrMoreVconDefs::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 2);
            
            (
                Node::ZeroOrMoreVconDefs(ZeroOrMoreVconDefs::Snoc(
                    t0,
                    t1,
                )),
                NonterminalKind::ZeroOrMoreVconDefs,
            )
        }
        RuleKind::R13 => {
            let rparen_7 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let index_args_rparen_6 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let index_args_5 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let index_args_lparen_4 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let param_types_rparen_3 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let param_types_2 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let param_types_lparen_1 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 8);
            
            (
                Node::VconDef(VconDef {
                    lparen: lparen_0,
                    param_types_lparen: param_types_lparen_1,
                    param_types: param_types_2,
                    param_types_rparen: param_types_rparen_3,
                    index_args_lparen: index_args_lparen_4,
                    index_args: index_args_5,
                    index_args_rparen: index_args_rparen_6,
                    rparen: rparen_7,
                }),
                NonterminalKind::VconDef,
            )
        }
        RuleKind::R14 => {
            let rparen_4 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let vcon_index_3 = nodes.pop().unwrap().try_into_number_8().ok().unwrap();
            let ind_2 = Box::new(Ind::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 5);
            
            (
                Node::Vcon(Vcon {
                    lparen: lparen_0,
                    ind: ind_2,
                    vcon_index: vcon_index_3,
                    rparen: rparen_4,
                }),
                NonterminalKind::Vcon,
            )
        }
        RuleKind::R15 => {
            let rparen_8 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let cases_rparen_7 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let cases_6 = Box::new(ZeroOrMoreMatchCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            let cases_lparen_5 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let return_type_4 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let return_type_arity_3 = nodes.pop().unwrap().try_into_number_8().ok().unwrap();
            let matchee_2 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 9);
            
            (
                Node::Match(Match {
                    lparen: lparen_0,
                    matchee: matchee_2,
                    return_type_arity: return_type_arity_3,
                    return_type: return_type_4,
                    cases_lparen: cases_lparen_5,
                    cases: cases_6,
                    cases_rparen: cases_rparen_7,
                    rparen: rparen_8,
                }),
                NonterminalKind::Match,
            )
        }
        RuleKind::R16 => {
            (
                Node::ZeroOrMoreMatchCases(ZeroOrMoreMatchCases::Nil),
                NonterminalKind::ZeroOrMoreMatchCases,
            )
        }
        RuleKind::R17 => {
            let t1 = Box::new(MatchCase::try_from(nodes.pop().unwrap()).ok().unwrap());
            let t0 = Box::new(ZeroOrMoreMatchCases::try_from(nodes.pop().unwrap()).ok().unwrap());
            
            states.truncate(states.len() - 2);
            
            (
                Node::ZeroOrMoreMatchCases(ZeroOrMoreMatchCases::Snoc(
                    t0,
                    t1,
                )),
                NonterminalKind::ZeroOrMoreMatchCases,
            )
        }
        RuleKind::R18 => {
            let rparen_3 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let return_val_2 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let arity_1 = nodes.pop().unwrap().try_into_number_8().ok().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::MatchCase(MatchCase {
                    lparen: lparen_0,
                    arity: arity_1,
                    return_val: return_val_2,
                    rparen: rparen_3,
                }),
                NonterminalKind::MatchCase,
            )
        }
        RuleKind::R19 => {
            let rparen_8 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let return_val_7 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let return_type_6 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let param_types_rparen_5 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let param_types_4 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let param_types_lparen_3 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            let decreasing_index_2 = Box::new(NumberOrNonrecKw::try_from(nodes.pop().unwrap()).ok().unwrap());
            nodes.pop().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 9);
            
            (
                Node::Fun(Fun {
                    lparen: lparen_0,
                    decreasing_index: decreasing_index_2,
                    param_types_lparen: param_types_lparen_3,
                    param_types: param_types_4,
                    param_types_rparen: param_types_rparen_5,
                    return_type: return_type_6,
                    return_val: return_val_7,
                    rparen: rparen_8,
                }),
                NonterminalKind::Fun,
            )
        }
        RuleKind::R20 => {
            let t0 = nodes.pop().unwrap().try_into_number_8().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::NumberOrNonrecKw(NumberOrNonrecKw::Number(
                    t0,
                )),
                NonterminalKind::NumberOrNonrecKw,
            )
        }
        RuleKind::R21 => {
            let t0 = nodes.pop().unwrap().try_into_nonrec_kw_7().ok().unwrap();
            
            states.truncate(states.len() - 1);
            
            (
                Node::NumberOrNonrecKw(NumberOrNonrecKw::NonrecKw(
                    t0,
                )),
                NonterminalKind::NumberOrNonrecKw,
            )
        }
        RuleKind::R22 => {
            let rparen_3 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let args_2 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let callee_1 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 4);
            
            (
                Node::App(App {
                    lparen: lparen_0,
                    callee: callee_1,
                    args: args_2,
                    rparen: rparen_3,
                }),
                NonterminalKind::App,
            )
        }
        RuleKind::R23 => {
            let rparen_6 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let return_type_5 = Box::new(Expr::try_from(nodes.pop().unwrap()).ok().unwrap());
            let param_types_rparen_4 = nodes.pop().unwrap().try_into_r_paren_1().ok().unwrap();
            let param_types_3 = Box::new(ZeroOrMoreExprs::try_from(nodes.pop().unwrap()).ok().unwrap());
            let param_types_lparen_2 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            nodes.pop().unwrap();
            let lparen_0 = nodes.pop().unwrap().try_into_l_paren_0().ok().unwrap();
            
            states.truncate(states.len() - 7);
            
            (
                Node::For(For {
                    lparen: lparen_0,
                    param_types_lparen: param_types_lparen_2,
                    param_types: param_types_3,
                    param_types_rparen: param_types_rparen_4,
                    return_type: return_type_5,
                    rparen: rparen_6,
                }),
                NonterminalKind::For,
            )
        }
    }
}

impl QuasiterminalKind {
    fn from_quasiterminal(quasiterminal: &Quasiterminal) -> Self {
        match quasiterminal {
            Quasiterminal::Terminal(terminal) => Self::from_terminal(terminal),
            Quasiterminal::Eof => Self::Eof,
        }
    }

    fn from_terminal(terminal: &Token) -> Self {
        match terminal {
            Token::LParen(_) => Self::LParen,
            Token::RParen(_) => Self::RParen,
            Token::IndKw(_) => Self::IndKw,
            Token::VconKw(_) => Self::VconKw,
            Token::MatchKw(_) => Self::MatchKw,
            Token::FunKw(_) => Self::FunKw,
            Token::ForKw(_) => Self::ForKw,
            Token::NonrecKw(_) => Self::NonrecKw,
            Token::Number(_) => Self::Number,
            Token::String(_) => Self::String,
            Token::Universe(_) => Self::Universe,
        }
    }
}

impl Node {
    fn from_terminal(terminal: Token) -> Self {
        match terminal {
            Token::LParen(t) => Self::LParen(t),
            Token::RParen(t) => Self::RParen(t),
            Token::IndKw(t) => Self::IndKw(t),
            Token::VconKw(t) => Self::VconKw(t),
            Token::MatchKw(t) => Self::MatchKw(t),
            Token::FunKw(t) => Self::FunKw(t),
            Token::ForKw(t) => Self::ForKw(t),
            Token::NonrecKw(t) => Self::NonrecKw(t),
            Token::Number(t) => Self::Number(t),
            Token::String(t) => Self::String(t),
            Token::Universe(t) => Self::Universe(t),
        }
    }
}

impl Quasiterminal {
    fn try_into_terminal(self) -> Result<Token, ()> {
        match self {
            Self::Terminal(terminal) => Ok(terminal),
            Self::Eof => Err(()),
        }
    }
}

const ACTION_TABLE: [[Action; 12]; 68] = [
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Shift(State::S22),
        Action::Shift(State::S31),
        Action::Shift(State::S10),
        Action::Shift(State::S57),
        Action::Shift(State::S64),
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S26),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S41),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S42),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S7),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S63),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Shift(State::S13),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Err,
        Action::Reduce(RuleKind::R0),
        Action::Reduce(RuleKind::R0),
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Shift(State::S0),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S20),
        Action::Err,
        Action::Shift(State::S21),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Err,
        Action::Reduce(RuleKind::R1),
        Action::Reduce(RuleKind::R1),
    ],
    [
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Err,
        Action::Reduce(RuleKind::R2),
        Action::Reduce(RuleKind::R2),
    ],
    [
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Err,
        Action::Reduce(RuleKind::R3),
        Action::Reduce(RuleKind::R3),
    ],
    [
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Err,
        Action::Reduce(RuleKind::R4),
        Action::Reduce(RuleKind::R4),
    ],
    [
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Err,
        Action::Reduce(RuleKind::R5),
        Action::Reduce(RuleKind::R5),
    ],
    [
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Err,
        Action::Reduce(RuleKind::R6),
        Action::Reduce(RuleKind::R6),
    ],
    [
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Err,
        Action::Reduce(RuleKind::R7),
        Action::Reduce(RuleKind::R7),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S23),
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S24),
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S25),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Shift(State::S27),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R11),
        Action::Reduce(RuleKind::R11),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S40),
        Action::Shift(State::S29),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S30),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Err,
        Action::Reduce(RuleKind::R8),
        Action::Reduce(RuleKind::R8),
    ],
    [
        Action::Shift(State::S32),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Shift(State::S22),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R9),
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
        Action::Reduce(RuleKind::R9),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R10),
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Err,
        Action::Reduce(RuleKind::R10),
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R12),
        Action::Reduce(RuleKind::R12),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S33),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S34),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S43),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R13),
        Action::Reduce(RuleKind::R13),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S45),
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S46),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R14),
        Action::Reduce(RuleKind::R14),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R14),
        Action::Err,
        Action::Reduce(RuleKind::R14),
        Action::Reduce(RuleKind::R14),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S8),
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S49),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R16),
        Action::Reduce(RuleKind::R16),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S54),
        Action::Shift(State::S51),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S52),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R15),
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Err,
        Action::Reduce(RuleKind::R15),
        Action::Reduce(RuleKind::R15),
    ],
    [
        Action::Reduce(RuleKind::R17),
        Action::Reduce(RuleKind::R17),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S11),
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S56),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R18),
        Action::Reduce(RuleKind::R18),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Shift(State::S62),
        Action::Shift(State::S61),
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Shift(State::S35),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S60),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R19),
        Action::Reduce(RuleKind::R19),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R19),
        Action::Err,
        Action::Reduce(RuleKind::R19),
        Action::Reduce(RuleKind::R19),
    ],
    [
        Action::Reduce(RuleKind::R20),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R21),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R22),
        Action::Reduce(RuleKind::R22),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R22),
        Action::Err,
        Action::Reduce(RuleKind::R22),
        Action::Reduce(RuleKind::R22),
    ],
    [
        Action::Shift(State::S37),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Err,
        Action::Shift(State::S66),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
    ],
    [
        Action::Reduce(RuleKind::R23),
        Action::Reduce(RuleKind::R23),
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Reduce(RuleKind::R23),
        Action::Err,
        Action::Reduce(RuleKind::R23),
        Action::Reduce(RuleKind::R23),
    ],
    [
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Err,
        Action::Accept,
    ],
];

fn get_action(top_state: State, next_quasiterminal_kind: QuasiterminalKind) -> Action {
    ACTION_TABLE[top_state as usize][next_quasiterminal_kind as usize]
}

const GOTO_TABLE: [[Option<State>; 13]; 68] = [
    [
        Some(State::S36),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S38),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S12),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S48),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        Some(State::S47),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S55),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S59),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S65),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        Some(State::S67),
        Some(State::S9),
        None,
        None,
        None,
        Some(State::S15),
        Some(State::S16),
        None,
        None,
        Some(State::S17),
        None,
        Some(State::S18),
        Some(State::S19),
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S1),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        Some(State::S28),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        Some(State::S39),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        Some(State::S44),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S2),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S3),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S4),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S5),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        Some(State::S6),
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S50),
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S53),
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        Some(State::S58),
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
    [
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
        None,
    ],
];

fn get_goto(top_state: State, new_node_kind: NonterminalKind) -> Option<State> {
    GOTO_TABLE[top_state as usize][new_node_kind as usize]
}

impl TryFrom<Node> for Expr {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Expr(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Ind {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Ind(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ZeroOrMoreExprs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ZeroOrMoreExprs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ZeroOrMoreVconDefs {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ZeroOrMoreVconDefs(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for VconDef {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::VconDef(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Vcon {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Vcon(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Match {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Match(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for ZeroOrMoreMatchCases {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::ZeroOrMoreMatchCases(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for MatchCase {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::MatchCase(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for Fun {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::Fun(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for NumberOrNonrecKw {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::NumberOrNonrecKw(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for App {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::App(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl TryFrom<Node> for For {
    type Error = Node;

    fn try_from(node: Node) -> Result<Self, Self::Error> {
        match node {
            Node::For(n) => Ok(n),
            _ => Err(node),
        }
    }
}

impl Node {
    fn try_into_l_paren_0(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::LParen(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_r_paren_1(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::RParen(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_ind_kw_2(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::IndKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_vcon_kw_3(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::VconKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_match_kw_4(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::MatchKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_fun_kw_5(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::FunKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_for_kw_6(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::ForKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_nonrec_kw_7(self) -> Result<crate::syntax_tree::token::ByteIndex, Self> {
        match self {
            Self::NonrecKw(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_number_8(self) -> Result<crate::syntax_tree::token::NumberLiteral, Self> {
        match self {
            Self::Number(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_string_9(self) -> Result<crate::syntax_tree::token::StringLiteral, Self> {
        match self {
            Self::String(t) => Ok(t),
            _ => Err(self),
        }
    }
    
    fn try_into_universe_10(self) -> Result<crate::syntax_tree::token::UniverseLiteral, Self> {
        match self {
            Self::Universe(t) => Ok(t),
            _ => Err(self),
        }
    }
}
