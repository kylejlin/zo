start Expr

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum Expr {
    Ind(Ind)
    Vcon(Vcon)
    Match(Match)
    Fun(Fun)
    App(App)
    For(For)
    Deb($Number)
    Universe($Universe)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Ind {
    _: $LParen

    _: $IndKw
    type_: $Universe
    name: $String

    _: $LParen
    index_types: ZeroOrMoreExprs
    _: $RParen

    _: $LParen
    constructor_defs: ZeroOrMoreVariantConstructorDefs
    _: $RParen

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum ZeroOrMoreExprs {
    Nil
    Cons(ZeroOrMoreExprs Expr)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum ZeroOrMoreVariantConstructorDefs {
    Nil
    Cons(ZeroOrMoreVariantConstructorDefs VariantConstructorDef)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct VariantConstructorDef {
    _: $LParen

    _: $LParen
    param_types: ZeroOrMoreExprs
    _: $RParen

    _: $LParen
    index_args: ZeroOrMoreExprs
    _: $RParen

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Vcon {
    _: $LParen

    _: $VconKw
    ind: Ind
    vcon_index: $Number

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Match {
    _: $LParen

    _: $MatchKw
    matchee: Expr
    return_type: Expr

    _: $LParen
    cases: ZeroOrMoreExprs
    _: $RParen

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Fun {
    _: $LParen

    _: $FunKw
    decreasing_index: NumberOrNonrecKw

    _: $LParen
    param_types: ZeroOrMoreExprs
    _: $RParen

    return_type: Expr
    body: Expr

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum NumberOrNonrecKw {
    Number($Number)
    NonrecKw($NonrecKw)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct App {
    _: $LParen

    callee: Expr
    args: ZeroOrMoreExprs

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct For {
    _: $LParen

    _: $ForKw

    _: $LParen
    param_types: ZeroOrMoreExprs
    _: $RParen

    return_type: Expr

    _: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
terminal Token {
    $LParen: crate::token::ByteIndex
    $RParen: crate::token::ByteIndex

    $IndKw: crate::token::ByteIndex
    $VconKw: crate::token::ByteIndex
    $MatchKw: crate::token::ByteIndex
    $FunKw: crate::token::ByteIndex
    $ForKw: crate::token::ByteIndex

    $NonrecKw: crate::token::ByteIndex

    $Number: crate::token::NumberLiteral
    $String: crate::token::StringLiteral
    $Universe: crate::token::UniverseLiteral
}
