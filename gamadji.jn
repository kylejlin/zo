param platform: @std.Platform
use @std.base.*(platform)
use @canvas.base.*(platform)

struct Rgba:
    r: U8
    g: U8
    b: U8
    a: U8

// TODO: Delete
/*
struct GamadjiFont(
    char_width: Usize
    char_height: Usize
):
    a: Vec(char_width * char_height, Rgba)
    i: Vec(char_width * char_height, Rgba)
    u: Vec(char_width * char_height, Rgba)
    e: Vec(char_width * char_height, Rgba)
    o: Vec(char_width * char_height, Rgba)
    ai: Vec(char_width * char_height, Rgba)
    au: Vec(char_width * char_height, Rgba)
    ei: Vec(char_width * char_height, Rgba)
    oi: Vec(char_width * char_height, Rgba)

    aerr: Vec(char_width * char_height, Rgba)
    irr: Vec(char_width * char_height, Rgba)
    urr: Vec(char_width * char_height, Rgba)
    yrr: Vec(char_width * char_height, Rgba)

    k: Vec(char_width * char_height, Rgba)
    g: Vec(char_width * char_height, Rgba)
    t: Vec(char_width * char_height, Rgba)
    d: Vec(char_width * char_height, Rgba)
    s: Vec(char_width * char_height, Rgba)
    z: Vec(char_width * char_height, Rgba)
    p: Vec(char_width * char_height, Rgba)
    b: Vec(char_width * char_height, Rgba)
    c: Vec(char_width * char_height, Rgba)
    j: Vec(char_width * char_height, Rgba)
    f: Vec(char_width * char_height, Rgba)
    v: Vec(char_width * char_height, Rgba)

    n: Vec(char_width * char_height, Rgba)
    m: Vec(char_width * char_height, Rgba)
    l: Vec(char_width * char_height, Rgba)
    h: Vec(char_width * char_height, Rgba)

    w: Vec(char_width * char_height, Rgba)
    y: Vec(char_width * char_height, Rgba)

    cisi: Vec(char_width * char_height, Rgba)

    ru: Vec(char_width * char_height, Rgba)
    rai: Vec(char_width * char_height, Rgba)
*/

enum GamadjiLetter
    a
    i
    u
    e
    o
    ai
    au
    ei
    oi

    aerr
    irr
    urr
    yrr

    k
    g
    t
    d
    s
    z
    p
    b
    c
    j
    f
    v

    n
    m
    l
    h

    w
    y

    cisi

    ru
    rai

fun GamadjiFont(
    char_width: Usize,
    char_height: Usize
) -> Set0:
    For(letter: GamadjiLetter) -> Vec(char_width * char_height, Rgba)

Tokenlike = List(GamadjiLetter)

/// Nontokenizable characters are returned as-is.
fun to_tokenlikes(src: String) -> List(Either(Tokenlike, Char)):
    to_tokenlikes_with_pending_tokenlike(src, nil())

// TODO: What's the recursive param?
/// Nontokenizable characters are returned as-is.
fun to_tokenlikes_with_pending_tokenlike(src: String, pending_tokenlike: Tokenlike) -> List(Either(Tokenlike, Char)):
    if src.starts_with("aerr"):
        pending_tokenlike.snoc(GamadjiLetter.aerr)

fun draw(
    trans: CanvasTransaction
    src: String
    #char_width: Usize
    #char_height: Usize
    font: GamadjiFont(char_width, char_height),
    tokenizer: Tokenizer
) -> CanvasTransaction:
    pass