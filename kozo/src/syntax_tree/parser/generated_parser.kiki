start Expr

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum Expr {
    Ind(Ind)
    Vcon(Vcon)
    Match(Match)
    Fun(Fun)
    App(App)
    For(For)
    Deb($Number)
    Universe($Universe)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Ind {
    lparen: $LParen

    _: $IndKw
    type_: $Universe
    name: $String

    index_types_lparen: $LParen
    index_types: ZeroOrMoreExprs
    index_types_rparen: $RParen

    vcon_defs_lparen: $LParen
    vcon_defs: ZeroOrMoreVconDefs
    vcon_defs_rparen: $RParen

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum ZeroOrMoreExprs {
    Nil
    Snoc(ZeroOrMoreExprs Expr)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum ZeroOrMoreVconDefs {
    Nil
    Snoc(ZeroOrMoreVconDefs VconDef)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct VconDef {
    lparen: $LParen

    param_types_lparen: $LParen
    param_types: ZeroOrMoreExprs
    param_types_rparen: $RParen

    index_args_lparen: $LParen
    index_args: ZeroOrMoreExprs
    index_args_rparen: $RParen

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Vcon {
    lparen: $LParen

    _: $VconKw
    ind: Ind
    vcon_index: $Number

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Match {
    lparen: $LParen

    _: $MatchKw
    matchee: Expr
    return_type: Expr

    cases_lparen: $LParen
    cases: ZeroOrMoreMatchCases
    cases_rparen: $RParen

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum ZeroOrMoreMatchCases {
    Nil
    Snoc(ZeroOrMoreMatchCases MatchCase)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct MatchCase {
    lparen: $LParen

    arity: $Number
    return_val: Expr

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct Fun {
    lparen: $LParen

    _: $FunKw
    decreasing_index: NumberOrNonrecKw

    param_types_lparen: $LParen
    param_types: ZeroOrMoreExprs
    param_types_rparen: $RParen

    return_type: Expr
    return_val: Expr

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
enum NumberOrNonrecKw {
    Number($Number)
    NonrecKw($NonrecKw)
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct App {
    lparen: $LParen

    callee: Expr
    args: ZeroOrMoreExprs

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
struct For {
    lparen: $LParen

    _: $ForKw

    param_types_lparen: $LParen
    param_types: ZeroOrMoreExprs
    param_types_rparen: $RParen

    return_type: Expr

    rparen: $RParen
}

#[derive(Debug, Clone, PartialEq, Eq, Hash)]
terminal Token {
    $LParen: crate::syntax_tree::token::ByteIndex
    $RParen: crate::syntax_tree::token::ByteIndex

    $IndKw: crate::syntax_tree::token::ByteIndex
    $VconKw: crate::syntax_tree::token::ByteIndex
    $MatchKw: crate::syntax_tree::token::ByteIndex
    $FunKw: crate::syntax_tree::token::ByteIndex
    $ForKw: crate::syntax_tree::token::ByteIndex

    $NonrecKw: crate::syntax_tree::token::ByteIndex

    $Number: crate::syntax_tree::token::NumberLiteral
    $String: crate::syntax_tree::token::StringLiteral
    $Universe: crate::syntax_tree::token::UniverseLiteral
}
